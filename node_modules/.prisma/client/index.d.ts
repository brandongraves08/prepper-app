
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Person
 * 
 */
export type Person = $Result.DefaultSelection<Prisma.$PersonPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model FoodItem
 * 
 */
export type FoodItem = $Result.DefaultSelection<Prisma.$FoodItemPayload>
/**
 * Model Food
 * 
 */
export type Food = $Result.DefaultSelection<Prisma.$FoodPayload>
/**
 * Model NutritionFact
 * 
 */
export type NutritionFact = $Result.DefaultSelection<Prisma.$NutritionFactPayload>
/**
 * Model Stock
 * 
 */
export type Stock = $Result.DefaultSelection<Prisma.$StockPayload>
/**
 * Model ConsumptionPlan
 * 
 */
export type ConsumptionPlan = $Result.DefaultSelection<Prisma.$ConsumptionPlanPayload>
/**
 * Model Supply
 * 
 */
export type Supply = $Result.DefaultSelection<Prisma.$SupplyPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more People
 * const people = await prisma.person.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more People
   * const people = await prisma.person.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.person`: Exposes CRUD operations for the **Person** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more People
    * const people = await prisma.person.findMany()
    * ```
    */
  get person(): Prisma.PersonDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs>;

  /**
   * `prisma.foodItem`: Exposes CRUD operations for the **FoodItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FoodItems
    * const foodItems = await prisma.foodItem.findMany()
    * ```
    */
  get foodItem(): Prisma.FoodItemDelegate<ExtArgs>;

  /**
   * `prisma.food`: Exposes CRUD operations for the **Food** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Foods
    * const foods = await prisma.food.findMany()
    * ```
    */
  get food(): Prisma.FoodDelegate<ExtArgs>;

  /**
   * `prisma.nutritionFact`: Exposes CRUD operations for the **NutritionFact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NutritionFacts
    * const nutritionFacts = await prisma.nutritionFact.findMany()
    * ```
    */
  get nutritionFact(): Prisma.NutritionFactDelegate<ExtArgs>;

  /**
   * `prisma.stock`: Exposes CRUD operations for the **Stock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stocks
    * const stocks = await prisma.stock.findMany()
    * ```
    */
  get stock(): Prisma.StockDelegate<ExtArgs>;

  /**
   * `prisma.consumptionPlan`: Exposes CRUD operations for the **ConsumptionPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConsumptionPlans
    * const consumptionPlans = await prisma.consumptionPlan.findMany()
    * ```
    */
  get consumptionPlan(): Prisma.ConsumptionPlanDelegate<ExtArgs>;

  /**
   * `prisma.supply`: Exposes CRUD operations for the **Supply** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Supplies
    * const supplies = await prisma.supply.findMany()
    * ```
    */
  get supply(): Prisma.SupplyDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Person: 'Person',
    Category: 'Category',
    Location: 'Location',
    FoodItem: 'FoodItem',
    Food: 'Food',
    NutritionFact: 'NutritionFact',
    Stock: 'Stock',
    ConsumptionPlan: 'ConsumptionPlan',
    Supply: 'Supply'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "person" | "category" | "location" | "foodItem" | "food" | "nutritionFact" | "stock" | "consumptionPlan" | "supply"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Person: {
        payload: Prisma.$PersonPayload<ExtArgs>
        fields: Prisma.PersonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          findFirst: {
            args: Prisma.PersonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          findMany: {
            args: Prisma.PersonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>[]
          }
          create: {
            args: Prisma.PersonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          createMany: {
            args: Prisma.PersonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PersonCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>[]
          }
          delete: {
            args: Prisma.PersonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          update: {
            args: Prisma.PersonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          deleteMany: {
            args: Prisma.PersonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PersonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PersonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          aggregate: {
            args: Prisma.PersonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePerson>
          }
          groupBy: {
            args: Prisma.PersonGroupByArgs<ExtArgs>
            result: $Utils.Optional<PersonGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonCountArgs<ExtArgs>
            result: $Utils.Optional<PersonCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      FoodItem: {
        payload: Prisma.$FoodItemPayload<ExtArgs>
        fields: Prisma.FoodItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload>
          }
          findFirst: {
            args: Prisma.FoodItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload>
          }
          findMany: {
            args: Prisma.FoodItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload>[]
          }
          create: {
            args: Prisma.FoodItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload>
          }
          createMany: {
            args: Prisma.FoodItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoodItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload>[]
          }
          delete: {
            args: Prisma.FoodItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload>
          }
          update: {
            args: Prisma.FoodItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload>
          }
          deleteMany: {
            args: Prisma.FoodItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FoodItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FoodItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload>
          }
          aggregate: {
            args: Prisma.FoodItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFoodItem>
          }
          groupBy: {
            args: Prisma.FoodItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<FoodItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodItemCountArgs<ExtArgs>
            result: $Utils.Optional<FoodItemCountAggregateOutputType> | number
          }
        }
      }
      Food: {
        payload: Prisma.$FoodPayload<ExtArgs>
        fields: Prisma.FoodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          findFirst: {
            args: Prisma.FoodFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          findMany: {
            args: Prisma.FoodFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>[]
          }
          create: {
            args: Prisma.FoodCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          createMany: {
            args: Prisma.FoodCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoodCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>[]
          }
          delete: {
            args: Prisma.FoodDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          update: {
            args: Prisma.FoodUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          deleteMany: {
            args: Prisma.FoodDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FoodUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FoodUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          aggregate: {
            args: Prisma.FoodAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFood>
          }
          groupBy: {
            args: Prisma.FoodGroupByArgs<ExtArgs>
            result: $Utils.Optional<FoodGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodCountArgs<ExtArgs>
            result: $Utils.Optional<FoodCountAggregateOutputType> | number
          }
        }
      }
      NutritionFact: {
        payload: Prisma.$NutritionFactPayload<ExtArgs>
        fields: Prisma.NutritionFactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NutritionFactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NutritionFactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NutritionFactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NutritionFactPayload>
          }
          findFirst: {
            args: Prisma.NutritionFactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NutritionFactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NutritionFactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NutritionFactPayload>
          }
          findMany: {
            args: Prisma.NutritionFactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NutritionFactPayload>[]
          }
          create: {
            args: Prisma.NutritionFactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NutritionFactPayload>
          }
          createMany: {
            args: Prisma.NutritionFactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NutritionFactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NutritionFactPayload>[]
          }
          delete: {
            args: Prisma.NutritionFactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NutritionFactPayload>
          }
          update: {
            args: Prisma.NutritionFactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NutritionFactPayload>
          }
          deleteMany: {
            args: Prisma.NutritionFactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NutritionFactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NutritionFactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NutritionFactPayload>
          }
          aggregate: {
            args: Prisma.NutritionFactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNutritionFact>
          }
          groupBy: {
            args: Prisma.NutritionFactGroupByArgs<ExtArgs>
            result: $Utils.Optional<NutritionFactGroupByOutputType>[]
          }
          count: {
            args: Prisma.NutritionFactCountArgs<ExtArgs>
            result: $Utils.Optional<NutritionFactCountAggregateOutputType> | number
          }
        }
      }
      Stock: {
        payload: Prisma.$StockPayload<ExtArgs>
        fields: Prisma.StockFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StockFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StockFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          findFirst: {
            args: Prisma.StockFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StockFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          findMany: {
            args: Prisma.StockFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>[]
          }
          create: {
            args: Prisma.StockCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          createMany: {
            args: Prisma.StockCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StockCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>[]
          }
          delete: {
            args: Prisma.StockDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          update: {
            args: Prisma.StockUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          deleteMany: {
            args: Prisma.StockDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StockUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StockUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          aggregate: {
            args: Prisma.StockAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStock>
          }
          groupBy: {
            args: Prisma.StockGroupByArgs<ExtArgs>
            result: $Utils.Optional<StockGroupByOutputType>[]
          }
          count: {
            args: Prisma.StockCountArgs<ExtArgs>
            result: $Utils.Optional<StockCountAggregateOutputType> | number
          }
        }
      }
      ConsumptionPlan: {
        payload: Prisma.$ConsumptionPlanPayload<ExtArgs>
        fields: Prisma.ConsumptionPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsumptionPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumptionPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsumptionPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumptionPlanPayload>
          }
          findFirst: {
            args: Prisma.ConsumptionPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumptionPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsumptionPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumptionPlanPayload>
          }
          findMany: {
            args: Prisma.ConsumptionPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumptionPlanPayload>[]
          }
          create: {
            args: Prisma.ConsumptionPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumptionPlanPayload>
          }
          createMany: {
            args: Prisma.ConsumptionPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsumptionPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumptionPlanPayload>[]
          }
          delete: {
            args: Prisma.ConsumptionPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumptionPlanPayload>
          }
          update: {
            args: Prisma.ConsumptionPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumptionPlanPayload>
          }
          deleteMany: {
            args: Prisma.ConsumptionPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsumptionPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConsumptionPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumptionPlanPayload>
          }
          aggregate: {
            args: Prisma.ConsumptionPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsumptionPlan>
          }
          groupBy: {
            args: Prisma.ConsumptionPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsumptionPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsumptionPlanCountArgs<ExtArgs>
            result: $Utils.Optional<ConsumptionPlanCountAggregateOutputType> | number
          }
        }
      }
      Supply: {
        payload: Prisma.$SupplyPayload<ExtArgs>
        fields: Prisma.SupplyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SupplyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SupplyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplyPayload>
          }
          findFirst: {
            args: Prisma.SupplyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SupplyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplyPayload>
          }
          findMany: {
            args: Prisma.SupplyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplyPayload>[]
          }
          create: {
            args: Prisma.SupplyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplyPayload>
          }
          createMany: {
            args: Prisma.SupplyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SupplyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplyPayload>[]
          }
          delete: {
            args: Prisma.SupplyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplyPayload>
          }
          update: {
            args: Prisma.SupplyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplyPayload>
          }
          deleteMany: {
            args: Prisma.SupplyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SupplyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SupplyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplyPayload>
          }
          aggregate: {
            args: Prisma.SupplyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSupply>
          }
          groupBy: {
            args: Prisma.SupplyGroupByArgs<ExtArgs>
            result: $Utils.Optional<SupplyGroupByOutputType>[]
          }
          count: {
            args: Prisma.SupplyCountArgs<ExtArgs>
            result: $Utils.Optional<SupplyCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PersonCountOutputType
   */

  export type PersonCountOutputType = {
    consumptionPlans: number
  }

  export type PersonCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consumptionPlans?: boolean | PersonCountOutputTypeCountConsumptionPlansArgs
  }

  // Custom InputTypes
  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonCountOutputType
     */
    select?: PersonCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeCountConsumptionPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsumptionPlanWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    foodItems: number
    supplies: number
    foods: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foodItems?: boolean | CategoryCountOutputTypeCountFoodItemsArgs
    supplies?: boolean | CategoryCountOutputTypeCountSuppliesArgs
    foods?: boolean | CategoryCountOutputTypeCountFoodsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountFoodItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodItemWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountSuppliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplyWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountFoodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    foodItems: number
    supplies: number
    stocks: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foodItems?: boolean | LocationCountOutputTypeCountFoodItemsArgs
    supplies?: boolean | LocationCountOutputTypeCountSuppliesArgs
    stocks?: boolean | LocationCountOutputTypeCountStocksArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountFoodItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodItemWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountSuppliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplyWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountStocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockWhereInput
  }


  /**
   * Count Type FoodCountOutputType
   */

  export type FoodCountOutputType = {
    stocks: number
  }

  export type FoodCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stocks?: boolean | FoodCountOutputTypeCountStocksArgs
  }

  // Custom InputTypes
  /**
   * FoodCountOutputType without action
   */
  export type FoodCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodCountOutputType
     */
    select?: FoodCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FoodCountOutputType without action
   */
  export type FoodCountOutputTypeCountStocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockWhereInput
  }


  /**
   * Count Type StockCountOutputType
   */

  export type StockCountOutputType = {
    consumptionPlans: number
  }

  export type StockCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consumptionPlans?: boolean | StockCountOutputTypeCountConsumptionPlansArgs
  }

  // Custom InputTypes
  /**
   * StockCountOutputType without action
   */
  export type StockCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockCountOutputType
     */
    select?: StockCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StockCountOutputType without action
   */
  export type StockCountOutputTypeCountConsumptionPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsumptionPlanWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Person
   */

  export type AggregatePerson = {
    _count: PersonCountAggregateOutputType | null
    _avg: PersonAvgAggregateOutputType | null
    _sum: PersonSumAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  export type PersonAvgAggregateOutputType = {
    id: number | null
    age: number | null
    dailyConsumption: number | null
  }

  export type PersonSumAggregateOutputType = {
    id: number | null
    age: number | null
    dailyConsumption: number | null
  }

  export type PersonMinAggregateOutputType = {
    id: number | null
    name: string | null
    age: number | null
    dietaryRestrictions: string | null
    dailyConsumption: number | null
  }

  export type PersonMaxAggregateOutputType = {
    id: number | null
    name: string | null
    age: number | null
    dietaryRestrictions: string | null
    dailyConsumption: number | null
  }

  export type PersonCountAggregateOutputType = {
    id: number
    name: number
    age: number
    dietaryRestrictions: number
    dailyConsumption: number
    _all: number
  }


  export type PersonAvgAggregateInputType = {
    id?: true
    age?: true
    dailyConsumption?: true
  }

  export type PersonSumAggregateInputType = {
    id?: true
    age?: true
    dailyConsumption?: true
  }

  export type PersonMinAggregateInputType = {
    id?: true
    name?: true
    age?: true
    dietaryRestrictions?: true
    dailyConsumption?: true
  }

  export type PersonMaxAggregateInputType = {
    id?: true
    name?: true
    age?: true
    dietaryRestrictions?: true
    dailyConsumption?: true
  }

  export type PersonCountAggregateInputType = {
    id?: true
    name?: true
    age?: true
    dietaryRestrictions?: true
    dailyConsumption?: true
    _all?: true
  }

  export type PersonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Person to aggregate.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned People
    **/
    _count?: true | PersonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonMaxAggregateInputType
  }

  export type GetPersonAggregateType<T extends PersonAggregateArgs> = {
        [P in keyof T & keyof AggregatePerson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerson[P]>
      : GetScalarType<T[P], AggregatePerson[P]>
  }




  export type PersonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonWhereInput
    orderBy?: PersonOrderByWithAggregationInput | PersonOrderByWithAggregationInput[]
    by: PersonScalarFieldEnum[] | PersonScalarFieldEnum
    having?: PersonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonCountAggregateInputType | true
    _avg?: PersonAvgAggregateInputType
    _sum?: PersonSumAggregateInputType
    _min?: PersonMinAggregateInputType
    _max?: PersonMaxAggregateInputType
  }

  export type PersonGroupByOutputType = {
    id: number
    name: string
    age: number
    dietaryRestrictions: string | null
    dailyConsumption: number
    _count: PersonCountAggregateOutputType | null
    _avg: PersonAvgAggregateOutputType | null
    _sum: PersonSumAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  type GetPersonGroupByPayload<T extends PersonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonGroupByOutputType[P]>
            : GetScalarType<T[P], PersonGroupByOutputType[P]>
        }
      >
    >


  export type PersonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    age?: boolean
    dietaryRestrictions?: boolean
    dailyConsumption?: boolean
    consumptionPlans?: boolean | Person$consumptionPlansArgs<ExtArgs>
    _count?: boolean | PersonCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["person"]>

  export type PersonSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    age?: boolean
    dietaryRestrictions?: boolean
    dailyConsumption?: boolean
  }, ExtArgs["result"]["person"]>

  export type PersonSelectScalar = {
    id?: boolean
    name?: boolean
    age?: boolean
    dietaryRestrictions?: boolean
    dailyConsumption?: boolean
  }

  export type PersonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consumptionPlans?: boolean | Person$consumptionPlansArgs<ExtArgs>
    _count?: boolean | PersonCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PersonIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PersonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Person"
    objects: {
      consumptionPlans: Prisma.$ConsumptionPlanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      age: number
      dietaryRestrictions: string | null
      dailyConsumption: number
    }, ExtArgs["result"]["person"]>
    composites: {}
  }

  type PersonGetPayload<S extends boolean | null | undefined | PersonDefaultArgs> = $Result.GetResult<Prisma.$PersonPayload, S>

  type PersonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PersonFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PersonCountAggregateInputType | true
    }

  export interface PersonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Person'], meta: { name: 'Person' } }
    /**
     * Find zero or one Person that matches the filter.
     * @param {PersonFindUniqueArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PersonFindUniqueArgs>(args: SelectSubset<T, PersonFindUniqueArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Person that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PersonFindUniqueOrThrowArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PersonFindUniqueOrThrowArgs>(args: SelectSubset<T, PersonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Person that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindFirstArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PersonFindFirstArgs>(args?: SelectSubset<T, PersonFindFirstArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Person that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindFirstOrThrowArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PersonFindFirstOrThrowArgs>(args?: SelectSubset<T, PersonFindFirstOrThrowArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more People that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all People
     * const people = await prisma.person.findMany()
     * 
     * // Get first 10 People
     * const people = await prisma.person.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personWithIdOnly = await prisma.person.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PersonFindManyArgs>(args?: SelectSubset<T, PersonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Person.
     * @param {PersonCreateArgs} args - Arguments to create a Person.
     * @example
     * // Create one Person
     * const Person = await prisma.person.create({
     *   data: {
     *     // ... data to create a Person
     *   }
     * })
     * 
     */
    create<T extends PersonCreateArgs>(args: SelectSubset<T, PersonCreateArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many People.
     * @param {PersonCreateManyArgs} args - Arguments to create many People.
     * @example
     * // Create many People
     * const person = await prisma.person.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PersonCreateManyArgs>(args?: SelectSubset<T, PersonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many People and returns the data saved in the database.
     * @param {PersonCreateManyAndReturnArgs} args - Arguments to create many People.
     * @example
     * // Create many People
     * const person = await prisma.person.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many People and only return the `id`
     * const personWithIdOnly = await prisma.person.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PersonCreateManyAndReturnArgs>(args?: SelectSubset<T, PersonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Person.
     * @param {PersonDeleteArgs} args - Arguments to delete one Person.
     * @example
     * // Delete one Person
     * const Person = await prisma.person.delete({
     *   where: {
     *     // ... filter to delete one Person
     *   }
     * })
     * 
     */
    delete<T extends PersonDeleteArgs>(args: SelectSubset<T, PersonDeleteArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Person.
     * @param {PersonUpdateArgs} args - Arguments to update one Person.
     * @example
     * // Update one Person
     * const person = await prisma.person.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PersonUpdateArgs>(args: SelectSubset<T, PersonUpdateArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more People.
     * @param {PersonDeleteManyArgs} args - Arguments to filter People to delete.
     * @example
     * // Delete a few People
     * const { count } = await prisma.person.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PersonDeleteManyArgs>(args?: SelectSubset<T, PersonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many People
     * const person = await prisma.person.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PersonUpdateManyArgs>(args: SelectSubset<T, PersonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Person.
     * @param {PersonUpsertArgs} args - Arguments to update or create a Person.
     * @example
     * // Update or create a Person
     * const person = await prisma.person.upsert({
     *   create: {
     *     // ... data to create a Person
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Person we want to update
     *   }
     * })
     */
    upsert<T extends PersonUpsertArgs>(args: SelectSubset<T, PersonUpsertArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonCountArgs} args - Arguments to filter People to count.
     * @example
     * // Count the number of People
     * const count = await prisma.person.count({
     *   where: {
     *     // ... the filter for the People we want to count
     *   }
     * })
    **/
    count<T extends PersonCountArgs>(
      args?: Subset<T, PersonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonAggregateArgs>(args: Subset<T, PersonAggregateArgs>): Prisma.PrismaPromise<GetPersonAggregateType<T>>

    /**
     * Group by Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonGroupByArgs['orderBy'] }
        : { orderBy?: PersonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Person model
   */
  readonly fields: PersonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Person.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consumptionPlans<T extends Person$consumptionPlansArgs<ExtArgs> = {}>(args?: Subset<T, Person$consumptionPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumptionPlanPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Person model
   */ 
  interface PersonFieldRefs {
    readonly id: FieldRef<"Person", 'Int'>
    readonly name: FieldRef<"Person", 'String'>
    readonly age: FieldRef<"Person", 'Int'>
    readonly dietaryRestrictions: FieldRef<"Person", 'String'>
    readonly dailyConsumption: FieldRef<"Person", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Person findUnique
   */
  export type PersonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person findUniqueOrThrow
   */
  export type PersonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person findFirst
   */
  export type PersonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of People.
     */
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person findFirstOrThrow
   */
  export type PersonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of People.
     */
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person findMany
   */
  export type PersonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which People to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person create
   */
  export type PersonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * The data needed to create a Person.
     */
    data: XOR<PersonCreateInput, PersonUncheckedCreateInput>
  }

  /**
   * Person createMany
   */
  export type PersonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many People.
     */
    data: PersonCreateManyInput | PersonCreateManyInput[]
  }

  /**
   * Person createManyAndReturn
   */
  export type PersonCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many People.
     */
    data: PersonCreateManyInput | PersonCreateManyInput[]
  }

  /**
   * Person update
   */
  export type PersonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * The data needed to update a Person.
     */
    data: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
    /**
     * Choose, which Person to update.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person updateMany
   */
  export type PersonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update People.
     */
    data: XOR<PersonUpdateManyMutationInput, PersonUncheckedUpdateManyInput>
    /**
     * Filter which People to update
     */
    where?: PersonWhereInput
  }

  /**
   * Person upsert
   */
  export type PersonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * The filter to search for the Person to update in case it exists.
     */
    where: PersonWhereUniqueInput
    /**
     * In case the Person found by the `where` argument doesn't exist, create a new Person with this data.
     */
    create: XOR<PersonCreateInput, PersonUncheckedCreateInput>
    /**
     * In case the Person was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
  }

  /**
   * Person delete
   */
  export type PersonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter which Person to delete.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person deleteMany
   */
  export type PersonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which People to delete
     */
    where?: PersonWhereInput
  }

  /**
   * Person.consumptionPlans
   */
  export type Person$consumptionPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumptionPlan
     */
    select?: ConsumptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumptionPlanInclude<ExtArgs> | null
    where?: ConsumptionPlanWhereInput
    orderBy?: ConsumptionPlanOrderByWithRelationInput | ConsumptionPlanOrderByWithRelationInput[]
    cursor?: ConsumptionPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsumptionPlanScalarFieldEnum | ConsumptionPlanScalarFieldEnum[]
  }

  /**
   * Person without action
   */
  export type PersonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    description: string | null
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    foodItems?: boolean | Category$foodItemsArgs<ExtArgs>
    supplies?: boolean | Category$suppliesArgs<ExtArgs>
    foods?: boolean | Category$foodsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foodItems?: boolean | Category$foodItemsArgs<ExtArgs>
    supplies?: boolean | Category$suppliesArgs<ExtArgs>
    foods?: boolean | Category$foodsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      foodItems: Prisma.$FoodItemPayload<ExtArgs>[]
      supplies: Prisma.$SupplyPayload<ExtArgs>[]
      foods: Prisma.$FoodPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    foodItems<T extends Category$foodItemsArgs<ExtArgs> = {}>(args?: Subset<T, Category$foodItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "findMany"> | Null>
    supplies<T extends Category$suppliesArgs<ExtArgs> = {}>(args?: Subset<T, Category$suppliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplyPayload<ExtArgs>, T, "findMany"> | Null>
    foods<T extends Category$foodsArgs<ExtArgs> = {}>(args?: Subset<T, Category$foodsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.foodItems
   */
  export type Category$foodItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    where?: FoodItemWhereInput
    orderBy?: FoodItemOrderByWithRelationInput | FoodItemOrderByWithRelationInput[]
    cursor?: FoodItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodItemScalarFieldEnum | FoodItemScalarFieldEnum[]
  }

  /**
   * Category.supplies
   */
  export type Category$suppliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supply
     */
    select?: SupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplyInclude<ExtArgs> | null
    where?: SupplyWhereInput
    orderBy?: SupplyOrderByWithRelationInput | SupplyOrderByWithRelationInput[]
    cursor?: SupplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SupplyScalarFieldEnum | SupplyScalarFieldEnum[]
  }

  /**
   * Category.foods
   */
  export type Category$foodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    where?: FoodWhereInput
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    cursor?: FoodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodScalarFieldEnum | FoodScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationAvgAggregateOutputType = {
    id: number | null
  }

  export type LocationSumAggregateOutputType = {
    id: number | null
  }

  export type LocationMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type LocationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type LocationAvgAggregateInputType = {
    id?: true
  }

  export type LocationSumAggregateInputType = {
    id?: true
  }

  export type LocationMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _avg?: LocationAvgAggregateInputType
    _sum?: LocationSumAggregateInputType
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: number
    name: string
    description: string | null
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    foodItems?: boolean | Location$foodItemsArgs<ExtArgs>
    supplies?: boolean | Location$suppliesArgs<ExtArgs>
    stocks?: boolean | Location$stocksArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
  }, ExtArgs["result"]["location"]>

  export type LocationSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foodItems?: boolean | Location$foodItemsArgs<ExtArgs>
    supplies?: boolean | Location$suppliesArgs<ExtArgs>
    stocks?: boolean | Location$stocksArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      foodItems: Prisma.$FoodItemPayload<ExtArgs>[]
      supplies: Prisma.$SupplyPayload<ExtArgs>[]
      stocks: Prisma.$StockPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFindUniqueArgs>(args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFindFirstArgs>(args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends LocationCreateArgs>(args: SelectSubset<T, LocationCreateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Locations.
     * @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCreateManyArgs>(args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Locations and returns the data saved in the database.
     * @param {LocationCreateManyAndReturnArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends LocationDeleteArgs>(args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationUpdateArgs>(args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationDeleteManyArgs>(args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationUpdateManyArgs>(args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends LocationUpsertArgs>(args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    foodItems<T extends Location$foodItemsArgs<ExtArgs> = {}>(args?: Subset<T, Location$foodItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "findMany"> | Null>
    supplies<T extends Location$suppliesArgs<ExtArgs> = {}>(args?: Subset<T, Location$suppliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplyPayload<ExtArgs>, T, "findMany"> | Null>
    stocks<T extends Location$stocksArgs<ExtArgs> = {}>(args?: Subset<T, Location$stocksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Location model
   */ 
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'Int'>
    readonly name: FieldRef<"Location", 'String'>
    readonly description: FieldRef<"Location", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }

  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
  }

  /**
   * Location createManyAndReturn
   */
  export type LocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
  }

  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
  }

  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }

  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
  }

  /**
   * Location.foodItems
   */
  export type Location$foodItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    where?: FoodItemWhereInput
    orderBy?: FoodItemOrderByWithRelationInput | FoodItemOrderByWithRelationInput[]
    cursor?: FoodItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodItemScalarFieldEnum | FoodItemScalarFieldEnum[]
  }

  /**
   * Location.supplies
   */
  export type Location$suppliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supply
     */
    select?: SupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplyInclude<ExtArgs> | null
    where?: SupplyWhereInput
    orderBy?: SupplyOrderByWithRelationInput | SupplyOrderByWithRelationInput[]
    cursor?: SupplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SupplyScalarFieldEnum | SupplyScalarFieldEnum[]
  }

  /**
   * Location.stocks
   */
  export type Location$stocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    where?: StockWhereInput
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    cursor?: StockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
  }


  /**
   * Model FoodItem
   */

  export type AggregateFoodItem = {
    _count: FoodItemCountAggregateOutputType | null
    _avg: FoodItemAvgAggregateOutputType | null
    _sum: FoodItemSumAggregateOutputType | null
    _min: FoodItemMinAggregateOutputType | null
    _max: FoodItemMaxAggregateOutputType | null
  }

  export type FoodItemAvgAggregateOutputType = {
    id: number | null
    quantity: number | null
    caloriesPerUnit: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    servingSize: number | null
    servingsPerUnit: number | null
    categoryId: number | null
    locationId: number | null
  }

  export type FoodItemSumAggregateOutputType = {
    id: number | null
    quantity: number | null
    caloriesPerUnit: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    servingSize: number | null
    servingsPerUnit: number | null
    categoryId: number | null
    locationId: number | null
  }

  export type FoodItemMinAggregateOutputType = {
    id: number | null
    name: string | null
    quantity: number | null
    unit: string | null
    caloriesPerUnit: number | null
    expiryDate: Date | null
    protein: number | null
    carbs: number | null
    fat: number | null
    servingSize: number | null
    servingsPerUnit: number | null
    barcode: string | null
    notes: string | null
    categoryId: number | null
    locationId: number | null
  }

  export type FoodItemMaxAggregateOutputType = {
    id: number | null
    name: string | null
    quantity: number | null
    unit: string | null
    caloriesPerUnit: number | null
    expiryDate: Date | null
    protein: number | null
    carbs: number | null
    fat: number | null
    servingSize: number | null
    servingsPerUnit: number | null
    barcode: string | null
    notes: string | null
    categoryId: number | null
    locationId: number | null
  }

  export type FoodItemCountAggregateOutputType = {
    id: number
    name: number
    quantity: number
    unit: number
    caloriesPerUnit: number
    expiryDate: number
    protein: number
    carbs: number
    fat: number
    servingSize: number
    servingsPerUnit: number
    barcode: number
    notes: number
    categoryId: number
    locationId: number
    _all: number
  }


  export type FoodItemAvgAggregateInputType = {
    id?: true
    quantity?: true
    caloriesPerUnit?: true
    protein?: true
    carbs?: true
    fat?: true
    servingSize?: true
    servingsPerUnit?: true
    categoryId?: true
    locationId?: true
  }

  export type FoodItemSumAggregateInputType = {
    id?: true
    quantity?: true
    caloriesPerUnit?: true
    protein?: true
    carbs?: true
    fat?: true
    servingSize?: true
    servingsPerUnit?: true
    categoryId?: true
    locationId?: true
  }

  export type FoodItemMinAggregateInputType = {
    id?: true
    name?: true
    quantity?: true
    unit?: true
    caloriesPerUnit?: true
    expiryDate?: true
    protein?: true
    carbs?: true
    fat?: true
    servingSize?: true
    servingsPerUnit?: true
    barcode?: true
    notes?: true
    categoryId?: true
    locationId?: true
  }

  export type FoodItemMaxAggregateInputType = {
    id?: true
    name?: true
    quantity?: true
    unit?: true
    caloriesPerUnit?: true
    expiryDate?: true
    protein?: true
    carbs?: true
    fat?: true
    servingSize?: true
    servingsPerUnit?: true
    barcode?: true
    notes?: true
    categoryId?: true
    locationId?: true
  }

  export type FoodItemCountAggregateInputType = {
    id?: true
    name?: true
    quantity?: true
    unit?: true
    caloriesPerUnit?: true
    expiryDate?: true
    protein?: true
    carbs?: true
    fat?: true
    servingSize?: true
    servingsPerUnit?: true
    barcode?: true
    notes?: true
    categoryId?: true
    locationId?: true
    _all?: true
  }

  export type FoodItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodItem to aggregate.
     */
    where?: FoodItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItems to fetch.
     */
    orderBy?: FoodItemOrderByWithRelationInput | FoodItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FoodItems
    **/
    _count?: true | FoodItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FoodItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FoodItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodItemMaxAggregateInputType
  }

  export type GetFoodItemAggregateType<T extends FoodItemAggregateArgs> = {
        [P in keyof T & keyof AggregateFoodItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoodItem[P]>
      : GetScalarType<T[P], AggregateFoodItem[P]>
  }




  export type FoodItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodItemWhereInput
    orderBy?: FoodItemOrderByWithAggregationInput | FoodItemOrderByWithAggregationInput[]
    by: FoodItemScalarFieldEnum[] | FoodItemScalarFieldEnum
    having?: FoodItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodItemCountAggregateInputType | true
    _avg?: FoodItemAvgAggregateInputType
    _sum?: FoodItemSumAggregateInputType
    _min?: FoodItemMinAggregateInputType
    _max?: FoodItemMaxAggregateInputType
  }

  export type FoodItemGroupByOutputType = {
    id: number
    name: string
    quantity: number
    unit: string
    caloriesPerUnit: number
    expiryDate: Date
    protein: number | null
    carbs: number | null
    fat: number | null
    servingSize: number | null
    servingsPerUnit: number | null
    barcode: string | null
    notes: string | null
    categoryId: number | null
    locationId: number | null
    _count: FoodItemCountAggregateOutputType | null
    _avg: FoodItemAvgAggregateOutputType | null
    _sum: FoodItemSumAggregateOutputType | null
    _min: FoodItemMinAggregateOutputType | null
    _max: FoodItemMaxAggregateOutputType | null
  }

  type GetFoodItemGroupByPayload<T extends FoodItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodItemGroupByOutputType[P]>
            : GetScalarType<T[P], FoodItemGroupByOutputType[P]>
        }
      >
    >


  export type FoodItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    quantity?: boolean
    unit?: boolean
    caloriesPerUnit?: boolean
    expiryDate?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    servingSize?: boolean
    servingsPerUnit?: boolean
    barcode?: boolean
    notes?: boolean
    categoryId?: boolean
    locationId?: boolean
    category?: boolean | FoodItem$categoryArgs<ExtArgs>
    location?: boolean | FoodItem$locationArgs<ExtArgs>
  }, ExtArgs["result"]["foodItem"]>

  export type FoodItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    quantity?: boolean
    unit?: boolean
    caloriesPerUnit?: boolean
    expiryDate?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    servingSize?: boolean
    servingsPerUnit?: boolean
    barcode?: boolean
    notes?: boolean
    categoryId?: boolean
    locationId?: boolean
    category?: boolean | FoodItem$categoryArgs<ExtArgs>
    location?: boolean | FoodItem$locationArgs<ExtArgs>
  }, ExtArgs["result"]["foodItem"]>

  export type FoodItemSelectScalar = {
    id?: boolean
    name?: boolean
    quantity?: boolean
    unit?: boolean
    caloriesPerUnit?: boolean
    expiryDate?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    servingSize?: boolean
    servingsPerUnit?: boolean
    barcode?: boolean
    notes?: boolean
    categoryId?: boolean
    locationId?: boolean
  }

  export type FoodItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | FoodItem$categoryArgs<ExtArgs>
    location?: boolean | FoodItem$locationArgs<ExtArgs>
  }
  export type FoodItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | FoodItem$categoryArgs<ExtArgs>
    location?: boolean | FoodItem$locationArgs<ExtArgs>
  }

  export type $FoodItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FoodItem"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs> | null
      location: Prisma.$LocationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      quantity: number
      unit: string
      caloriesPerUnit: number
      expiryDate: Date
      protein: number | null
      carbs: number | null
      fat: number | null
      servingSize: number | null
      servingsPerUnit: number | null
      barcode: string | null
      notes: string | null
      categoryId: number | null
      locationId: number | null
    }, ExtArgs["result"]["foodItem"]>
    composites: {}
  }

  type FoodItemGetPayload<S extends boolean | null | undefined | FoodItemDefaultArgs> = $Result.GetResult<Prisma.$FoodItemPayload, S>

  type FoodItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FoodItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FoodItemCountAggregateInputType | true
    }

  export interface FoodItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FoodItem'], meta: { name: 'FoodItem' } }
    /**
     * Find zero or one FoodItem that matches the filter.
     * @param {FoodItemFindUniqueArgs} args - Arguments to find a FoodItem
     * @example
     * // Get one FoodItem
     * const foodItem = await prisma.foodItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FoodItemFindUniqueArgs>(args: SelectSubset<T, FoodItemFindUniqueArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FoodItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FoodItemFindUniqueOrThrowArgs} args - Arguments to find a FoodItem
     * @example
     * // Get one FoodItem
     * const foodItem = await prisma.foodItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FoodItemFindUniqueOrThrowArgs>(args: SelectSubset<T, FoodItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FoodItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemFindFirstArgs} args - Arguments to find a FoodItem
     * @example
     * // Get one FoodItem
     * const foodItem = await prisma.foodItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FoodItemFindFirstArgs>(args?: SelectSubset<T, FoodItemFindFirstArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FoodItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemFindFirstOrThrowArgs} args - Arguments to find a FoodItem
     * @example
     * // Get one FoodItem
     * const foodItem = await prisma.foodItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FoodItemFindFirstOrThrowArgs>(args?: SelectSubset<T, FoodItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FoodItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FoodItems
     * const foodItems = await prisma.foodItem.findMany()
     * 
     * // Get first 10 FoodItems
     * const foodItems = await prisma.foodItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodItemWithIdOnly = await prisma.foodItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FoodItemFindManyArgs>(args?: SelectSubset<T, FoodItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FoodItem.
     * @param {FoodItemCreateArgs} args - Arguments to create a FoodItem.
     * @example
     * // Create one FoodItem
     * const FoodItem = await prisma.foodItem.create({
     *   data: {
     *     // ... data to create a FoodItem
     *   }
     * })
     * 
     */
    create<T extends FoodItemCreateArgs>(args: SelectSubset<T, FoodItemCreateArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FoodItems.
     * @param {FoodItemCreateManyArgs} args - Arguments to create many FoodItems.
     * @example
     * // Create many FoodItems
     * const foodItem = await prisma.foodItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FoodItemCreateManyArgs>(args?: SelectSubset<T, FoodItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FoodItems and returns the data saved in the database.
     * @param {FoodItemCreateManyAndReturnArgs} args - Arguments to create many FoodItems.
     * @example
     * // Create many FoodItems
     * const foodItem = await prisma.foodItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FoodItems and only return the `id`
     * const foodItemWithIdOnly = await prisma.foodItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FoodItemCreateManyAndReturnArgs>(args?: SelectSubset<T, FoodItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FoodItem.
     * @param {FoodItemDeleteArgs} args - Arguments to delete one FoodItem.
     * @example
     * // Delete one FoodItem
     * const FoodItem = await prisma.foodItem.delete({
     *   where: {
     *     // ... filter to delete one FoodItem
     *   }
     * })
     * 
     */
    delete<T extends FoodItemDeleteArgs>(args: SelectSubset<T, FoodItemDeleteArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FoodItem.
     * @param {FoodItemUpdateArgs} args - Arguments to update one FoodItem.
     * @example
     * // Update one FoodItem
     * const foodItem = await prisma.foodItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FoodItemUpdateArgs>(args: SelectSubset<T, FoodItemUpdateArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FoodItems.
     * @param {FoodItemDeleteManyArgs} args - Arguments to filter FoodItems to delete.
     * @example
     * // Delete a few FoodItems
     * const { count } = await prisma.foodItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FoodItemDeleteManyArgs>(args?: SelectSubset<T, FoodItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FoodItems
     * const foodItem = await prisma.foodItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FoodItemUpdateManyArgs>(args: SelectSubset<T, FoodItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FoodItem.
     * @param {FoodItemUpsertArgs} args - Arguments to update or create a FoodItem.
     * @example
     * // Update or create a FoodItem
     * const foodItem = await prisma.foodItem.upsert({
     *   create: {
     *     // ... data to create a FoodItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FoodItem we want to update
     *   }
     * })
     */
    upsert<T extends FoodItemUpsertArgs>(args: SelectSubset<T, FoodItemUpsertArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FoodItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemCountArgs} args - Arguments to filter FoodItems to count.
     * @example
     * // Count the number of FoodItems
     * const count = await prisma.foodItem.count({
     *   where: {
     *     // ... the filter for the FoodItems we want to count
     *   }
     * })
    **/
    count<T extends FoodItemCountArgs>(
      args?: Subset<T, FoodItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FoodItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodItemAggregateArgs>(args: Subset<T, FoodItemAggregateArgs>): Prisma.PrismaPromise<GetFoodItemAggregateType<T>>

    /**
     * Group by FoodItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodItemGroupByArgs['orderBy'] }
        : { orderBy?: FoodItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FoodItem model
   */
  readonly fields: FoodItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FoodItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends FoodItem$categoryArgs<ExtArgs> = {}>(args?: Subset<T, FoodItem$categoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    location<T extends FoodItem$locationArgs<ExtArgs> = {}>(args?: Subset<T, FoodItem$locationArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FoodItem model
   */ 
  interface FoodItemFieldRefs {
    readonly id: FieldRef<"FoodItem", 'Int'>
    readonly name: FieldRef<"FoodItem", 'String'>
    readonly quantity: FieldRef<"FoodItem", 'Int'>
    readonly unit: FieldRef<"FoodItem", 'String'>
    readonly caloriesPerUnit: FieldRef<"FoodItem", 'Int'>
    readonly expiryDate: FieldRef<"FoodItem", 'DateTime'>
    readonly protein: FieldRef<"FoodItem", 'Float'>
    readonly carbs: FieldRef<"FoodItem", 'Float'>
    readonly fat: FieldRef<"FoodItem", 'Float'>
    readonly servingSize: FieldRef<"FoodItem", 'Float'>
    readonly servingsPerUnit: FieldRef<"FoodItem", 'Float'>
    readonly barcode: FieldRef<"FoodItem", 'String'>
    readonly notes: FieldRef<"FoodItem", 'String'>
    readonly categoryId: FieldRef<"FoodItem", 'Int'>
    readonly locationId: FieldRef<"FoodItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * FoodItem findUnique
   */
  export type FoodItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * Filter, which FoodItem to fetch.
     */
    where: FoodItemWhereUniqueInput
  }

  /**
   * FoodItem findUniqueOrThrow
   */
  export type FoodItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * Filter, which FoodItem to fetch.
     */
    where: FoodItemWhereUniqueInput
  }

  /**
   * FoodItem findFirst
   */
  export type FoodItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * Filter, which FoodItem to fetch.
     */
    where?: FoodItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItems to fetch.
     */
    orderBy?: FoodItemOrderByWithRelationInput | FoodItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodItems.
     */
    cursor?: FoodItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodItems.
     */
    distinct?: FoodItemScalarFieldEnum | FoodItemScalarFieldEnum[]
  }

  /**
   * FoodItem findFirstOrThrow
   */
  export type FoodItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * Filter, which FoodItem to fetch.
     */
    where?: FoodItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItems to fetch.
     */
    orderBy?: FoodItemOrderByWithRelationInput | FoodItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodItems.
     */
    cursor?: FoodItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodItems.
     */
    distinct?: FoodItemScalarFieldEnum | FoodItemScalarFieldEnum[]
  }

  /**
   * FoodItem findMany
   */
  export type FoodItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * Filter, which FoodItems to fetch.
     */
    where?: FoodItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItems to fetch.
     */
    orderBy?: FoodItemOrderByWithRelationInput | FoodItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FoodItems.
     */
    cursor?: FoodItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItems.
     */
    skip?: number
    distinct?: FoodItemScalarFieldEnum | FoodItemScalarFieldEnum[]
  }

  /**
   * FoodItem create
   */
  export type FoodItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * The data needed to create a FoodItem.
     */
    data: XOR<FoodItemCreateInput, FoodItemUncheckedCreateInput>
  }

  /**
   * FoodItem createMany
   */
  export type FoodItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FoodItems.
     */
    data: FoodItemCreateManyInput | FoodItemCreateManyInput[]
  }

  /**
   * FoodItem createManyAndReturn
   */
  export type FoodItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FoodItems.
     */
    data: FoodItemCreateManyInput | FoodItemCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodItem update
   */
  export type FoodItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * The data needed to update a FoodItem.
     */
    data: XOR<FoodItemUpdateInput, FoodItemUncheckedUpdateInput>
    /**
     * Choose, which FoodItem to update.
     */
    where: FoodItemWhereUniqueInput
  }

  /**
   * FoodItem updateMany
   */
  export type FoodItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FoodItems.
     */
    data: XOR<FoodItemUpdateManyMutationInput, FoodItemUncheckedUpdateManyInput>
    /**
     * Filter which FoodItems to update
     */
    where?: FoodItemWhereInput
  }

  /**
   * FoodItem upsert
   */
  export type FoodItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * The filter to search for the FoodItem to update in case it exists.
     */
    where: FoodItemWhereUniqueInput
    /**
     * In case the FoodItem found by the `where` argument doesn't exist, create a new FoodItem with this data.
     */
    create: XOR<FoodItemCreateInput, FoodItemUncheckedCreateInput>
    /**
     * In case the FoodItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodItemUpdateInput, FoodItemUncheckedUpdateInput>
  }

  /**
   * FoodItem delete
   */
  export type FoodItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * Filter which FoodItem to delete.
     */
    where: FoodItemWhereUniqueInput
  }

  /**
   * FoodItem deleteMany
   */
  export type FoodItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodItems to delete
     */
    where?: FoodItemWhereInput
  }

  /**
   * FoodItem.category
   */
  export type FoodItem$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * FoodItem.location
   */
  export type FoodItem$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
  }

  /**
   * FoodItem without action
   */
  export type FoodItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
  }


  /**
   * Model Food
   */

  export type AggregateFood = {
    _count: FoodCountAggregateOutputType | null
    _avg: FoodAvgAggregateOutputType | null
    _sum: FoodSumAggregateOutputType | null
    _min: FoodMinAggregateOutputType | null
    _max: FoodMaxAggregateOutputType | null
  }

  export type FoodAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type FoodSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type FoodMinAggregateOutputType = {
    id: number | null
    name: string | null
    brand: string | null
    upc: string | null
    categoryId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodMaxAggregateOutputType = {
    id: number | null
    name: string | null
    brand: string | null
    upc: string | null
    categoryId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodCountAggregateOutputType = {
    id: number
    name: number
    brand: number
    upc: number
    categoryId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FoodAvgAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type FoodSumAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type FoodMinAggregateInputType = {
    id?: true
    name?: true
    brand?: true
    upc?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodMaxAggregateInputType = {
    id?: true
    name?: true
    brand?: true
    upc?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodCountAggregateInputType = {
    id?: true
    name?: true
    brand?: true
    upc?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FoodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Food to aggregate.
     */
    where?: FoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foods to fetch.
     */
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Foods
    **/
    _count?: true | FoodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FoodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FoodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodMaxAggregateInputType
  }

  export type GetFoodAggregateType<T extends FoodAggregateArgs> = {
        [P in keyof T & keyof AggregateFood]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFood[P]>
      : GetScalarType<T[P], AggregateFood[P]>
  }




  export type FoodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodWhereInput
    orderBy?: FoodOrderByWithAggregationInput | FoodOrderByWithAggregationInput[]
    by: FoodScalarFieldEnum[] | FoodScalarFieldEnum
    having?: FoodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodCountAggregateInputType | true
    _avg?: FoodAvgAggregateInputType
    _sum?: FoodSumAggregateInputType
    _min?: FoodMinAggregateInputType
    _max?: FoodMaxAggregateInputType
  }

  export type FoodGroupByOutputType = {
    id: number
    name: string
    brand: string | null
    upc: string | null
    categoryId: number | null
    createdAt: Date
    updatedAt: Date
    _count: FoodCountAggregateOutputType | null
    _avg: FoodAvgAggregateOutputType | null
    _sum: FoodSumAggregateOutputType | null
    _min: FoodMinAggregateOutputType | null
    _max: FoodMaxAggregateOutputType | null
  }

  type GetFoodGroupByPayload<T extends FoodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodGroupByOutputType[P]>
            : GetScalarType<T[P], FoodGroupByOutputType[P]>
        }
      >
    >


  export type FoodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    brand?: boolean
    upc?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | Food$categoryArgs<ExtArgs>
    nutrition?: boolean | Food$nutritionArgs<ExtArgs>
    stocks?: boolean | Food$stocksArgs<ExtArgs>
    _count?: boolean | FoodCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["food"]>

  export type FoodSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    brand?: boolean
    upc?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | Food$categoryArgs<ExtArgs>
  }, ExtArgs["result"]["food"]>

  export type FoodSelectScalar = {
    id?: boolean
    name?: boolean
    brand?: boolean
    upc?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FoodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | Food$categoryArgs<ExtArgs>
    nutrition?: boolean | Food$nutritionArgs<ExtArgs>
    stocks?: boolean | Food$stocksArgs<ExtArgs>
    _count?: boolean | FoodCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FoodIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | Food$categoryArgs<ExtArgs>
  }

  export type $FoodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Food"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs> | null
      nutrition: Prisma.$NutritionFactPayload<ExtArgs> | null
      stocks: Prisma.$StockPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      brand: string | null
      upc: string | null
      categoryId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["food"]>
    composites: {}
  }

  type FoodGetPayload<S extends boolean | null | undefined | FoodDefaultArgs> = $Result.GetResult<Prisma.$FoodPayload, S>

  type FoodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FoodFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FoodCountAggregateInputType | true
    }

  export interface FoodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Food'], meta: { name: 'Food' } }
    /**
     * Find zero or one Food that matches the filter.
     * @param {FoodFindUniqueArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FoodFindUniqueArgs>(args: SelectSubset<T, FoodFindUniqueArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Food that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FoodFindUniqueOrThrowArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FoodFindUniqueOrThrowArgs>(args: SelectSubset<T, FoodFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Food that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodFindFirstArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FoodFindFirstArgs>(args?: SelectSubset<T, FoodFindFirstArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Food that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodFindFirstOrThrowArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FoodFindFirstOrThrowArgs>(args?: SelectSubset<T, FoodFindFirstOrThrowArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Foods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Foods
     * const foods = await prisma.food.findMany()
     * 
     * // Get first 10 Foods
     * const foods = await prisma.food.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodWithIdOnly = await prisma.food.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FoodFindManyArgs>(args?: SelectSubset<T, FoodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Food.
     * @param {FoodCreateArgs} args - Arguments to create a Food.
     * @example
     * // Create one Food
     * const Food = await prisma.food.create({
     *   data: {
     *     // ... data to create a Food
     *   }
     * })
     * 
     */
    create<T extends FoodCreateArgs>(args: SelectSubset<T, FoodCreateArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Foods.
     * @param {FoodCreateManyArgs} args - Arguments to create many Foods.
     * @example
     * // Create many Foods
     * const food = await prisma.food.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FoodCreateManyArgs>(args?: SelectSubset<T, FoodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Foods and returns the data saved in the database.
     * @param {FoodCreateManyAndReturnArgs} args - Arguments to create many Foods.
     * @example
     * // Create many Foods
     * const food = await prisma.food.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Foods and only return the `id`
     * const foodWithIdOnly = await prisma.food.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FoodCreateManyAndReturnArgs>(args?: SelectSubset<T, FoodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Food.
     * @param {FoodDeleteArgs} args - Arguments to delete one Food.
     * @example
     * // Delete one Food
     * const Food = await prisma.food.delete({
     *   where: {
     *     // ... filter to delete one Food
     *   }
     * })
     * 
     */
    delete<T extends FoodDeleteArgs>(args: SelectSubset<T, FoodDeleteArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Food.
     * @param {FoodUpdateArgs} args - Arguments to update one Food.
     * @example
     * // Update one Food
     * const food = await prisma.food.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FoodUpdateArgs>(args: SelectSubset<T, FoodUpdateArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Foods.
     * @param {FoodDeleteManyArgs} args - Arguments to filter Foods to delete.
     * @example
     * // Delete a few Foods
     * const { count } = await prisma.food.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FoodDeleteManyArgs>(args?: SelectSubset<T, FoodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Foods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Foods
     * const food = await prisma.food.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FoodUpdateManyArgs>(args: SelectSubset<T, FoodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Food.
     * @param {FoodUpsertArgs} args - Arguments to update or create a Food.
     * @example
     * // Update or create a Food
     * const food = await prisma.food.upsert({
     *   create: {
     *     // ... data to create a Food
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Food we want to update
     *   }
     * })
     */
    upsert<T extends FoodUpsertArgs>(args: SelectSubset<T, FoodUpsertArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Foods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodCountArgs} args - Arguments to filter Foods to count.
     * @example
     * // Count the number of Foods
     * const count = await prisma.food.count({
     *   where: {
     *     // ... the filter for the Foods we want to count
     *   }
     * })
    **/
    count<T extends FoodCountArgs>(
      args?: Subset<T, FoodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Food.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodAggregateArgs>(args: Subset<T, FoodAggregateArgs>): Prisma.PrismaPromise<GetFoodAggregateType<T>>

    /**
     * Group by Food.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodGroupByArgs['orderBy'] }
        : { orderBy?: FoodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Food model
   */
  readonly fields: FoodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Food.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends Food$categoryArgs<ExtArgs> = {}>(args?: Subset<T, Food$categoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    nutrition<T extends Food$nutritionArgs<ExtArgs> = {}>(args?: Subset<T, Food$nutritionArgs<ExtArgs>>): Prisma__NutritionFactClient<$Result.GetResult<Prisma.$NutritionFactPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    stocks<T extends Food$stocksArgs<ExtArgs> = {}>(args?: Subset<T, Food$stocksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Food model
   */ 
  interface FoodFieldRefs {
    readonly id: FieldRef<"Food", 'Int'>
    readonly name: FieldRef<"Food", 'String'>
    readonly brand: FieldRef<"Food", 'String'>
    readonly upc: FieldRef<"Food", 'String'>
    readonly categoryId: FieldRef<"Food", 'Int'>
    readonly createdAt: FieldRef<"Food", 'DateTime'>
    readonly updatedAt: FieldRef<"Food", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Food findUnique
   */
  export type FoodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Food to fetch.
     */
    where: FoodWhereUniqueInput
  }

  /**
   * Food findUniqueOrThrow
   */
  export type FoodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Food to fetch.
     */
    where: FoodWhereUniqueInput
  }

  /**
   * Food findFirst
   */
  export type FoodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Food to fetch.
     */
    where?: FoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foods to fetch.
     */
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Foods.
     */
    cursor?: FoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Foods.
     */
    distinct?: FoodScalarFieldEnum | FoodScalarFieldEnum[]
  }

  /**
   * Food findFirstOrThrow
   */
  export type FoodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Food to fetch.
     */
    where?: FoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foods to fetch.
     */
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Foods.
     */
    cursor?: FoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Foods.
     */
    distinct?: FoodScalarFieldEnum | FoodScalarFieldEnum[]
  }

  /**
   * Food findMany
   */
  export type FoodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Foods to fetch.
     */
    where?: FoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foods to fetch.
     */
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Foods.
     */
    cursor?: FoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foods.
     */
    skip?: number
    distinct?: FoodScalarFieldEnum | FoodScalarFieldEnum[]
  }

  /**
   * Food create
   */
  export type FoodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * The data needed to create a Food.
     */
    data: XOR<FoodCreateInput, FoodUncheckedCreateInput>
  }

  /**
   * Food createMany
   */
  export type FoodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Foods.
     */
    data: FoodCreateManyInput | FoodCreateManyInput[]
  }

  /**
   * Food createManyAndReturn
   */
  export type FoodCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Foods.
     */
    data: FoodCreateManyInput | FoodCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Food update
   */
  export type FoodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * The data needed to update a Food.
     */
    data: XOR<FoodUpdateInput, FoodUncheckedUpdateInput>
    /**
     * Choose, which Food to update.
     */
    where: FoodWhereUniqueInput
  }

  /**
   * Food updateMany
   */
  export type FoodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Foods.
     */
    data: XOR<FoodUpdateManyMutationInput, FoodUncheckedUpdateManyInput>
    /**
     * Filter which Foods to update
     */
    where?: FoodWhereInput
  }

  /**
   * Food upsert
   */
  export type FoodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * The filter to search for the Food to update in case it exists.
     */
    where: FoodWhereUniqueInput
    /**
     * In case the Food found by the `where` argument doesn't exist, create a new Food with this data.
     */
    create: XOR<FoodCreateInput, FoodUncheckedCreateInput>
    /**
     * In case the Food was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodUpdateInput, FoodUncheckedUpdateInput>
  }

  /**
   * Food delete
   */
  export type FoodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter which Food to delete.
     */
    where: FoodWhereUniqueInput
  }

  /**
   * Food deleteMany
   */
  export type FoodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Foods to delete
     */
    where?: FoodWhereInput
  }

  /**
   * Food.category
   */
  export type Food$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Food.nutrition
   */
  export type Food$nutritionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NutritionFact
     */
    select?: NutritionFactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NutritionFactInclude<ExtArgs> | null
    where?: NutritionFactWhereInput
  }

  /**
   * Food.stocks
   */
  export type Food$stocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    where?: StockWhereInput
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    cursor?: StockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Food without action
   */
  export type FoodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
  }


  /**
   * Model NutritionFact
   */

  export type AggregateNutritionFact = {
    _count: NutritionFactCountAggregateOutputType | null
    _avg: NutritionFactAvgAggregateOutputType | null
    _sum: NutritionFactSumAggregateOutputType | null
    _min: NutritionFactMinAggregateOutputType | null
    _max: NutritionFactMaxAggregateOutputType | null
  }

  export type NutritionFactAvgAggregateOutputType = {
    id: number | null
    foodId: number | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    fiber: number | null
    sodium: number | null
    servingSize: number | null
    servingsPerUnit: number | null
  }

  export type NutritionFactSumAggregateOutputType = {
    id: number | null
    foodId: number | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    fiber: number | null
    sodium: number | null
    servingSize: number | null
    servingsPerUnit: number | null
  }

  export type NutritionFactMinAggregateOutputType = {
    id: number | null
    foodId: number | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    fiber: number | null
    sodium: number | null
    servingSize: number | null
    servingsPerUnit: number | null
    fetchedAt: Date | null
  }

  export type NutritionFactMaxAggregateOutputType = {
    id: number | null
    foodId: number | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    fiber: number | null
    sodium: number | null
    servingSize: number | null
    servingsPerUnit: number | null
    fetchedAt: Date | null
  }

  export type NutritionFactCountAggregateOutputType = {
    id: number
    foodId: number
    calories: number
    protein: number
    carbs: number
    fat: number
    fiber: number
    sodium: number
    servingSize: number
    servingsPerUnit: number
    fetchedAt: number
    _all: number
  }


  export type NutritionFactAvgAggregateInputType = {
    id?: true
    foodId?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    fiber?: true
    sodium?: true
    servingSize?: true
    servingsPerUnit?: true
  }

  export type NutritionFactSumAggregateInputType = {
    id?: true
    foodId?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    fiber?: true
    sodium?: true
    servingSize?: true
    servingsPerUnit?: true
  }

  export type NutritionFactMinAggregateInputType = {
    id?: true
    foodId?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    fiber?: true
    sodium?: true
    servingSize?: true
    servingsPerUnit?: true
    fetchedAt?: true
  }

  export type NutritionFactMaxAggregateInputType = {
    id?: true
    foodId?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    fiber?: true
    sodium?: true
    servingSize?: true
    servingsPerUnit?: true
    fetchedAt?: true
  }

  export type NutritionFactCountAggregateInputType = {
    id?: true
    foodId?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    fiber?: true
    sodium?: true
    servingSize?: true
    servingsPerUnit?: true
    fetchedAt?: true
    _all?: true
  }

  export type NutritionFactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NutritionFact to aggregate.
     */
    where?: NutritionFactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NutritionFacts to fetch.
     */
    orderBy?: NutritionFactOrderByWithRelationInput | NutritionFactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NutritionFactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NutritionFacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NutritionFacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NutritionFacts
    **/
    _count?: true | NutritionFactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NutritionFactAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NutritionFactSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NutritionFactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NutritionFactMaxAggregateInputType
  }

  export type GetNutritionFactAggregateType<T extends NutritionFactAggregateArgs> = {
        [P in keyof T & keyof AggregateNutritionFact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNutritionFact[P]>
      : GetScalarType<T[P], AggregateNutritionFact[P]>
  }




  export type NutritionFactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NutritionFactWhereInput
    orderBy?: NutritionFactOrderByWithAggregationInput | NutritionFactOrderByWithAggregationInput[]
    by: NutritionFactScalarFieldEnum[] | NutritionFactScalarFieldEnum
    having?: NutritionFactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NutritionFactCountAggregateInputType | true
    _avg?: NutritionFactAvgAggregateInputType
    _sum?: NutritionFactSumAggregateInputType
    _min?: NutritionFactMinAggregateInputType
    _max?: NutritionFactMaxAggregateInputType
  }

  export type NutritionFactGroupByOutputType = {
    id: number
    foodId: number
    calories: number
    protein: number
    carbs: number
    fat: number
    fiber: number | null
    sodium: number | null
    servingSize: number | null
    servingsPerUnit: number | null
    fetchedAt: Date
    _count: NutritionFactCountAggregateOutputType | null
    _avg: NutritionFactAvgAggregateOutputType | null
    _sum: NutritionFactSumAggregateOutputType | null
    _min: NutritionFactMinAggregateOutputType | null
    _max: NutritionFactMaxAggregateOutputType | null
  }

  type GetNutritionFactGroupByPayload<T extends NutritionFactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NutritionFactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NutritionFactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NutritionFactGroupByOutputType[P]>
            : GetScalarType<T[P], NutritionFactGroupByOutputType[P]>
        }
      >
    >


  export type NutritionFactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    foodId?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    fiber?: boolean
    sodium?: boolean
    servingSize?: boolean
    servingsPerUnit?: boolean
    fetchedAt?: boolean
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nutritionFact"]>

  export type NutritionFactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    foodId?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    fiber?: boolean
    sodium?: boolean
    servingSize?: boolean
    servingsPerUnit?: boolean
    fetchedAt?: boolean
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nutritionFact"]>

  export type NutritionFactSelectScalar = {
    id?: boolean
    foodId?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    fiber?: boolean
    sodium?: boolean
    servingSize?: boolean
    servingsPerUnit?: boolean
    fetchedAt?: boolean
  }

  export type NutritionFactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }
  export type NutritionFactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }

  export type $NutritionFactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NutritionFact"
    objects: {
      food: Prisma.$FoodPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      foodId: number
      calories: number
      protein: number
      carbs: number
      fat: number
      fiber: number | null
      sodium: number | null
      servingSize: number | null
      servingsPerUnit: number | null
      fetchedAt: Date
    }, ExtArgs["result"]["nutritionFact"]>
    composites: {}
  }

  type NutritionFactGetPayload<S extends boolean | null | undefined | NutritionFactDefaultArgs> = $Result.GetResult<Prisma.$NutritionFactPayload, S>

  type NutritionFactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NutritionFactFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NutritionFactCountAggregateInputType | true
    }

  export interface NutritionFactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NutritionFact'], meta: { name: 'NutritionFact' } }
    /**
     * Find zero or one NutritionFact that matches the filter.
     * @param {NutritionFactFindUniqueArgs} args - Arguments to find a NutritionFact
     * @example
     * // Get one NutritionFact
     * const nutritionFact = await prisma.nutritionFact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NutritionFactFindUniqueArgs>(args: SelectSubset<T, NutritionFactFindUniqueArgs<ExtArgs>>): Prisma__NutritionFactClient<$Result.GetResult<Prisma.$NutritionFactPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one NutritionFact that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NutritionFactFindUniqueOrThrowArgs} args - Arguments to find a NutritionFact
     * @example
     * // Get one NutritionFact
     * const nutritionFact = await prisma.nutritionFact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NutritionFactFindUniqueOrThrowArgs>(args: SelectSubset<T, NutritionFactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NutritionFactClient<$Result.GetResult<Prisma.$NutritionFactPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first NutritionFact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionFactFindFirstArgs} args - Arguments to find a NutritionFact
     * @example
     * // Get one NutritionFact
     * const nutritionFact = await prisma.nutritionFact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NutritionFactFindFirstArgs>(args?: SelectSubset<T, NutritionFactFindFirstArgs<ExtArgs>>): Prisma__NutritionFactClient<$Result.GetResult<Prisma.$NutritionFactPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first NutritionFact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionFactFindFirstOrThrowArgs} args - Arguments to find a NutritionFact
     * @example
     * // Get one NutritionFact
     * const nutritionFact = await prisma.nutritionFact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NutritionFactFindFirstOrThrowArgs>(args?: SelectSubset<T, NutritionFactFindFirstOrThrowArgs<ExtArgs>>): Prisma__NutritionFactClient<$Result.GetResult<Prisma.$NutritionFactPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more NutritionFacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionFactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NutritionFacts
     * const nutritionFacts = await prisma.nutritionFact.findMany()
     * 
     * // Get first 10 NutritionFacts
     * const nutritionFacts = await prisma.nutritionFact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nutritionFactWithIdOnly = await prisma.nutritionFact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NutritionFactFindManyArgs>(args?: SelectSubset<T, NutritionFactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NutritionFactPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a NutritionFact.
     * @param {NutritionFactCreateArgs} args - Arguments to create a NutritionFact.
     * @example
     * // Create one NutritionFact
     * const NutritionFact = await prisma.nutritionFact.create({
     *   data: {
     *     // ... data to create a NutritionFact
     *   }
     * })
     * 
     */
    create<T extends NutritionFactCreateArgs>(args: SelectSubset<T, NutritionFactCreateArgs<ExtArgs>>): Prisma__NutritionFactClient<$Result.GetResult<Prisma.$NutritionFactPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many NutritionFacts.
     * @param {NutritionFactCreateManyArgs} args - Arguments to create many NutritionFacts.
     * @example
     * // Create many NutritionFacts
     * const nutritionFact = await prisma.nutritionFact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NutritionFactCreateManyArgs>(args?: SelectSubset<T, NutritionFactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NutritionFacts and returns the data saved in the database.
     * @param {NutritionFactCreateManyAndReturnArgs} args - Arguments to create many NutritionFacts.
     * @example
     * // Create many NutritionFacts
     * const nutritionFact = await prisma.nutritionFact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NutritionFacts and only return the `id`
     * const nutritionFactWithIdOnly = await prisma.nutritionFact.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NutritionFactCreateManyAndReturnArgs>(args?: SelectSubset<T, NutritionFactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NutritionFactPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a NutritionFact.
     * @param {NutritionFactDeleteArgs} args - Arguments to delete one NutritionFact.
     * @example
     * // Delete one NutritionFact
     * const NutritionFact = await prisma.nutritionFact.delete({
     *   where: {
     *     // ... filter to delete one NutritionFact
     *   }
     * })
     * 
     */
    delete<T extends NutritionFactDeleteArgs>(args: SelectSubset<T, NutritionFactDeleteArgs<ExtArgs>>): Prisma__NutritionFactClient<$Result.GetResult<Prisma.$NutritionFactPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one NutritionFact.
     * @param {NutritionFactUpdateArgs} args - Arguments to update one NutritionFact.
     * @example
     * // Update one NutritionFact
     * const nutritionFact = await prisma.nutritionFact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NutritionFactUpdateArgs>(args: SelectSubset<T, NutritionFactUpdateArgs<ExtArgs>>): Prisma__NutritionFactClient<$Result.GetResult<Prisma.$NutritionFactPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more NutritionFacts.
     * @param {NutritionFactDeleteManyArgs} args - Arguments to filter NutritionFacts to delete.
     * @example
     * // Delete a few NutritionFacts
     * const { count } = await prisma.nutritionFact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NutritionFactDeleteManyArgs>(args?: SelectSubset<T, NutritionFactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NutritionFacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionFactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NutritionFacts
     * const nutritionFact = await prisma.nutritionFact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NutritionFactUpdateManyArgs>(args: SelectSubset<T, NutritionFactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NutritionFact.
     * @param {NutritionFactUpsertArgs} args - Arguments to update or create a NutritionFact.
     * @example
     * // Update or create a NutritionFact
     * const nutritionFact = await prisma.nutritionFact.upsert({
     *   create: {
     *     // ... data to create a NutritionFact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NutritionFact we want to update
     *   }
     * })
     */
    upsert<T extends NutritionFactUpsertArgs>(args: SelectSubset<T, NutritionFactUpsertArgs<ExtArgs>>): Prisma__NutritionFactClient<$Result.GetResult<Prisma.$NutritionFactPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of NutritionFacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionFactCountArgs} args - Arguments to filter NutritionFacts to count.
     * @example
     * // Count the number of NutritionFacts
     * const count = await prisma.nutritionFact.count({
     *   where: {
     *     // ... the filter for the NutritionFacts we want to count
     *   }
     * })
    **/
    count<T extends NutritionFactCountArgs>(
      args?: Subset<T, NutritionFactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NutritionFactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NutritionFact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionFactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NutritionFactAggregateArgs>(args: Subset<T, NutritionFactAggregateArgs>): Prisma.PrismaPromise<GetNutritionFactAggregateType<T>>

    /**
     * Group by NutritionFact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionFactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NutritionFactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NutritionFactGroupByArgs['orderBy'] }
        : { orderBy?: NutritionFactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NutritionFactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNutritionFactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NutritionFact model
   */
  readonly fields: NutritionFactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NutritionFact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NutritionFactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    food<T extends FoodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FoodDefaultArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NutritionFact model
   */ 
  interface NutritionFactFieldRefs {
    readonly id: FieldRef<"NutritionFact", 'Int'>
    readonly foodId: FieldRef<"NutritionFact", 'Int'>
    readonly calories: FieldRef<"NutritionFact", 'Float'>
    readonly protein: FieldRef<"NutritionFact", 'Float'>
    readonly carbs: FieldRef<"NutritionFact", 'Float'>
    readonly fat: FieldRef<"NutritionFact", 'Float'>
    readonly fiber: FieldRef<"NutritionFact", 'Float'>
    readonly sodium: FieldRef<"NutritionFact", 'Float'>
    readonly servingSize: FieldRef<"NutritionFact", 'Float'>
    readonly servingsPerUnit: FieldRef<"NutritionFact", 'Float'>
    readonly fetchedAt: FieldRef<"NutritionFact", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NutritionFact findUnique
   */
  export type NutritionFactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NutritionFact
     */
    select?: NutritionFactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NutritionFactInclude<ExtArgs> | null
    /**
     * Filter, which NutritionFact to fetch.
     */
    where: NutritionFactWhereUniqueInput
  }

  /**
   * NutritionFact findUniqueOrThrow
   */
  export type NutritionFactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NutritionFact
     */
    select?: NutritionFactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NutritionFactInclude<ExtArgs> | null
    /**
     * Filter, which NutritionFact to fetch.
     */
    where: NutritionFactWhereUniqueInput
  }

  /**
   * NutritionFact findFirst
   */
  export type NutritionFactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NutritionFact
     */
    select?: NutritionFactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NutritionFactInclude<ExtArgs> | null
    /**
     * Filter, which NutritionFact to fetch.
     */
    where?: NutritionFactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NutritionFacts to fetch.
     */
    orderBy?: NutritionFactOrderByWithRelationInput | NutritionFactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NutritionFacts.
     */
    cursor?: NutritionFactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NutritionFacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NutritionFacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NutritionFacts.
     */
    distinct?: NutritionFactScalarFieldEnum | NutritionFactScalarFieldEnum[]
  }

  /**
   * NutritionFact findFirstOrThrow
   */
  export type NutritionFactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NutritionFact
     */
    select?: NutritionFactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NutritionFactInclude<ExtArgs> | null
    /**
     * Filter, which NutritionFact to fetch.
     */
    where?: NutritionFactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NutritionFacts to fetch.
     */
    orderBy?: NutritionFactOrderByWithRelationInput | NutritionFactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NutritionFacts.
     */
    cursor?: NutritionFactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NutritionFacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NutritionFacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NutritionFacts.
     */
    distinct?: NutritionFactScalarFieldEnum | NutritionFactScalarFieldEnum[]
  }

  /**
   * NutritionFact findMany
   */
  export type NutritionFactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NutritionFact
     */
    select?: NutritionFactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NutritionFactInclude<ExtArgs> | null
    /**
     * Filter, which NutritionFacts to fetch.
     */
    where?: NutritionFactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NutritionFacts to fetch.
     */
    orderBy?: NutritionFactOrderByWithRelationInput | NutritionFactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NutritionFacts.
     */
    cursor?: NutritionFactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NutritionFacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NutritionFacts.
     */
    skip?: number
    distinct?: NutritionFactScalarFieldEnum | NutritionFactScalarFieldEnum[]
  }

  /**
   * NutritionFact create
   */
  export type NutritionFactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NutritionFact
     */
    select?: NutritionFactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NutritionFactInclude<ExtArgs> | null
    /**
     * The data needed to create a NutritionFact.
     */
    data: XOR<NutritionFactCreateInput, NutritionFactUncheckedCreateInput>
  }

  /**
   * NutritionFact createMany
   */
  export type NutritionFactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NutritionFacts.
     */
    data: NutritionFactCreateManyInput | NutritionFactCreateManyInput[]
  }

  /**
   * NutritionFact createManyAndReturn
   */
  export type NutritionFactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NutritionFact
     */
    select?: NutritionFactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many NutritionFacts.
     */
    data: NutritionFactCreateManyInput | NutritionFactCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NutritionFactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NutritionFact update
   */
  export type NutritionFactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NutritionFact
     */
    select?: NutritionFactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NutritionFactInclude<ExtArgs> | null
    /**
     * The data needed to update a NutritionFact.
     */
    data: XOR<NutritionFactUpdateInput, NutritionFactUncheckedUpdateInput>
    /**
     * Choose, which NutritionFact to update.
     */
    where: NutritionFactWhereUniqueInput
  }

  /**
   * NutritionFact updateMany
   */
  export type NutritionFactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NutritionFacts.
     */
    data: XOR<NutritionFactUpdateManyMutationInput, NutritionFactUncheckedUpdateManyInput>
    /**
     * Filter which NutritionFacts to update
     */
    where?: NutritionFactWhereInput
  }

  /**
   * NutritionFact upsert
   */
  export type NutritionFactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NutritionFact
     */
    select?: NutritionFactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NutritionFactInclude<ExtArgs> | null
    /**
     * The filter to search for the NutritionFact to update in case it exists.
     */
    where: NutritionFactWhereUniqueInput
    /**
     * In case the NutritionFact found by the `where` argument doesn't exist, create a new NutritionFact with this data.
     */
    create: XOR<NutritionFactCreateInput, NutritionFactUncheckedCreateInput>
    /**
     * In case the NutritionFact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NutritionFactUpdateInput, NutritionFactUncheckedUpdateInput>
  }

  /**
   * NutritionFact delete
   */
  export type NutritionFactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NutritionFact
     */
    select?: NutritionFactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NutritionFactInclude<ExtArgs> | null
    /**
     * Filter which NutritionFact to delete.
     */
    where: NutritionFactWhereUniqueInput
  }

  /**
   * NutritionFact deleteMany
   */
  export type NutritionFactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NutritionFacts to delete
     */
    where?: NutritionFactWhereInput
  }

  /**
   * NutritionFact without action
   */
  export type NutritionFactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NutritionFact
     */
    select?: NutritionFactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NutritionFactInclude<ExtArgs> | null
  }


  /**
   * Model Stock
   */

  export type AggregateStock = {
    _count: StockCountAggregateOutputType | null
    _avg: StockAvgAggregateOutputType | null
    _sum: StockSumAggregateOutputType | null
    _min: StockMinAggregateOutputType | null
    _max: StockMaxAggregateOutputType | null
  }

  export type StockAvgAggregateOutputType = {
    id: number | null
    foodId: number | null
    quantity: number | null
    locationId: number | null
    servingsRemaining: number | null
  }

  export type StockSumAggregateOutputType = {
    id: number | null
    foodId: number | null
    quantity: number | null
    locationId: number | null
    servingsRemaining: number | null
  }

  export type StockMinAggregateOutputType = {
    id: number | null
    foodId: number | null
    quantity: number | null
    locationId: number | null
    expiryDate: Date | null
    servingsRemaining: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StockMaxAggregateOutputType = {
    id: number | null
    foodId: number | null
    quantity: number | null
    locationId: number | null
    expiryDate: Date | null
    servingsRemaining: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StockCountAggregateOutputType = {
    id: number
    foodId: number
    quantity: number
    locationId: number
    expiryDate: number
    servingsRemaining: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StockAvgAggregateInputType = {
    id?: true
    foodId?: true
    quantity?: true
    locationId?: true
    servingsRemaining?: true
  }

  export type StockSumAggregateInputType = {
    id?: true
    foodId?: true
    quantity?: true
    locationId?: true
    servingsRemaining?: true
  }

  export type StockMinAggregateInputType = {
    id?: true
    foodId?: true
    quantity?: true
    locationId?: true
    expiryDate?: true
    servingsRemaining?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StockMaxAggregateInputType = {
    id?: true
    foodId?: true
    quantity?: true
    locationId?: true
    expiryDate?: true
    servingsRemaining?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StockCountAggregateInputType = {
    id?: true
    foodId?: true
    quantity?: true
    locationId?: true
    expiryDate?: true
    servingsRemaining?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StockAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stock to aggregate.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stocks
    **/
    _count?: true | StockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StockMaxAggregateInputType
  }

  export type GetStockAggregateType<T extends StockAggregateArgs> = {
        [P in keyof T & keyof AggregateStock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStock[P]>
      : GetScalarType<T[P], AggregateStock[P]>
  }




  export type StockGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockWhereInput
    orderBy?: StockOrderByWithAggregationInput | StockOrderByWithAggregationInput[]
    by: StockScalarFieldEnum[] | StockScalarFieldEnum
    having?: StockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StockCountAggregateInputType | true
    _avg?: StockAvgAggregateInputType
    _sum?: StockSumAggregateInputType
    _min?: StockMinAggregateInputType
    _max?: StockMaxAggregateInputType
  }

  export type StockGroupByOutputType = {
    id: number
    foodId: number
    quantity: number
    locationId: number | null
    expiryDate: Date | null
    servingsRemaining: number | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: StockCountAggregateOutputType | null
    _avg: StockAvgAggregateOutputType | null
    _sum: StockSumAggregateOutputType | null
    _min: StockMinAggregateOutputType | null
    _max: StockMaxAggregateOutputType | null
  }

  type GetStockGroupByPayload<T extends StockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StockGroupByOutputType[P]>
            : GetScalarType<T[P], StockGroupByOutputType[P]>
        }
      >
    >


  export type StockSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    foodId?: boolean
    quantity?: boolean
    locationId?: boolean
    expiryDate?: boolean
    servingsRemaining?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    food?: boolean | FoodDefaultArgs<ExtArgs>
    location?: boolean | Stock$locationArgs<ExtArgs>
    consumptionPlans?: boolean | Stock$consumptionPlansArgs<ExtArgs>
    _count?: boolean | StockCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stock"]>

  export type StockSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    foodId?: boolean
    quantity?: boolean
    locationId?: boolean
    expiryDate?: boolean
    servingsRemaining?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    food?: boolean | FoodDefaultArgs<ExtArgs>
    location?: boolean | Stock$locationArgs<ExtArgs>
  }, ExtArgs["result"]["stock"]>

  export type StockSelectScalar = {
    id?: boolean
    foodId?: boolean
    quantity?: boolean
    locationId?: boolean
    expiryDate?: boolean
    servingsRemaining?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StockInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    food?: boolean | FoodDefaultArgs<ExtArgs>
    location?: boolean | Stock$locationArgs<ExtArgs>
    consumptionPlans?: boolean | Stock$consumptionPlansArgs<ExtArgs>
    _count?: boolean | StockCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StockIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    food?: boolean | FoodDefaultArgs<ExtArgs>
    location?: boolean | Stock$locationArgs<ExtArgs>
  }

  export type $StockPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stock"
    objects: {
      food: Prisma.$FoodPayload<ExtArgs>
      location: Prisma.$LocationPayload<ExtArgs> | null
      consumptionPlans: Prisma.$ConsumptionPlanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      foodId: number
      quantity: number
      locationId: number | null
      expiryDate: Date | null
      servingsRemaining: number | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["stock"]>
    composites: {}
  }

  type StockGetPayload<S extends boolean | null | undefined | StockDefaultArgs> = $Result.GetResult<Prisma.$StockPayload, S>

  type StockCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StockFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StockCountAggregateInputType | true
    }

  export interface StockDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stock'], meta: { name: 'Stock' } }
    /**
     * Find zero or one Stock that matches the filter.
     * @param {StockFindUniqueArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StockFindUniqueArgs>(args: SelectSubset<T, StockFindUniqueArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Stock that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StockFindUniqueOrThrowArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StockFindUniqueOrThrowArgs>(args: SelectSubset<T, StockFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Stock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindFirstArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StockFindFirstArgs>(args?: SelectSubset<T, StockFindFirstArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Stock that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindFirstOrThrowArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StockFindFirstOrThrowArgs>(args?: SelectSubset<T, StockFindFirstOrThrowArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Stocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stocks
     * const stocks = await prisma.stock.findMany()
     * 
     * // Get first 10 Stocks
     * const stocks = await prisma.stock.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stockWithIdOnly = await prisma.stock.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StockFindManyArgs>(args?: SelectSubset<T, StockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Stock.
     * @param {StockCreateArgs} args - Arguments to create a Stock.
     * @example
     * // Create one Stock
     * const Stock = await prisma.stock.create({
     *   data: {
     *     // ... data to create a Stock
     *   }
     * })
     * 
     */
    create<T extends StockCreateArgs>(args: SelectSubset<T, StockCreateArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Stocks.
     * @param {StockCreateManyArgs} args - Arguments to create many Stocks.
     * @example
     * // Create many Stocks
     * const stock = await prisma.stock.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StockCreateManyArgs>(args?: SelectSubset<T, StockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stocks and returns the data saved in the database.
     * @param {StockCreateManyAndReturnArgs} args - Arguments to create many Stocks.
     * @example
     * // Create many Stocks
     * const stock = await prisma.stock.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stocks and only return the `id`
     * const stockWithIdOnly = await prisma.stock.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StockCreateManyAndReturnArgs>(args?: SelectSubset<T, StockCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Stock.
     * @param {StockDeleteArgs} args - Arguments to delete one Stock.
     * @example
     * // Delete one Stock
     * const Stock = await prisma.stock.delete({
     *   where: {
     *     // ... filter to delete one Stock
     *   }
     * })
     * 
     */
    delete<T extends StockDeleteArgs>(args: SelectSubset<T, StockDeleteArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Stock.
     * @param {StockUpdateArgs} args - Arguments to update one Stock.
     * @example
     * // Update one Stock
     * const stock = await prisma.stock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StockUpdateArgs>(args: SelectSubset<T, StockUpdateArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Stocks.
     * @param {StockDeleteManyArgs} args - Arguments to filter Stocks to delete.
     * @example
     * // Delete a few Stocks
     * const { count } = await prisma.stock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StockDeleteManyArgs>(args?: SelectSubset<T, StockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stocks
     * const stock = await prisma.stock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StockUpdateManyArgs>(args: SelectSubset<T, StockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Stock.
     * @param {StockUpsertArgs} args - Arguments to update or create a Stock.
     * @example
     * // Update or create a Stock
     * const stock = await prisma.stock.upsert({
     *   create: {
     *     // ... data to create a Stock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stock we want to update
     *   }
     * })
     */
    upsert<T extends StockUpsertArgs>(args: SelectSubset<T, StockUpsertArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Stocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockCountArgs} args - Arguments to filter Stocks to count.
     * @example
     * // Count the number of Stocks
     * const count = await prisma.stock.count({
     *   where: {
     *     // ... the filter for the Stocks we want to count
     *   }
     * })
    **/
    count<T extends StockCountArgs>(
      args?: Subset<T, StockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StockAggregateArgs>(args: Subset<T, StockAggregateArgs>): Prisma.PrismaPromise<GetStockAggregateType<T>>

    /**
     * Group by Stock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StockGroupByArgs['orderBy'] }
        : { orderBy?: StockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stock model
   */
  readonly fields: StockFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StockClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    food<T extends FoodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FoodDefaultArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    location<T extends Stock$locationArgs<ExtArgs> = {}>(args?: Subset<T, Stock$locationArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    consumptionPlans<T extends Stock$consumptionPlansArgs<ExtArgs> = {}>(args?: Subset<T, Stock$consumptionPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumptionPlanPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stock model
   */ 
  interface StockFieldRefs {
    readonly id: FieldRef<"Stock", 'Int'>
    readonly foodId: FieldRef<"Stock", 'Int'>
    readonly quantity: FieldRef<"Stock", 'Int'>
    readonly locationId: FieldRef<"Stock", 'Int'>
    readonly expiryDate: FieldRef<"Stock", 'DateTime'>
    readonly servingsRemaining: FieldRef<"Stock", 'Float'>
    readonly notes: FieldRef<"Stock", 'String'>
    readonly createdAt: FieldRef<"Stock", 'DateTime'>
    readonly updatedAt: FieldRef<"Stock", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Stock findUnique
   */
  export type StockFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock findUniqueOrThrow
   */
  export type StockFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock findFirst
   */
  export type StockFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stocks.
     */
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Stock findFirstOrThrow
   */
  export type StockFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stocks.
     */
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Stock findMany
   */
  export type StockFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stocks to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Stock create
   */
  export type StockCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The data needed to create a Stock.
     */
    data: XOR<StockCreateInput, StockUncheckedCreateInput>
  }

  /**
   * Stock createMany
   */
  export type StockCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stocks.
     */
    data: StockCreateManyInput | StockCreateManyInput[]
  }

  /**
   * Stock createManyAndReturn
   */
  export type StockCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Stocks.
     */
    data: StockCreateManyInput | StockCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stock update
   */
  export type StockUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The data needed to update a Stock.
     */
    data: XOR<StockUpdateInput, StockUncheckedUpdateInput>
    /**
     * Choose, which Stock to update.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock updateMany
   */
  export type StockUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stocks.
     */
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyInput>
    /**
     * Filter which Stocks to update
     */
    where?: StockWhereInput
  }

  /**
   * Stock upsert
   */
  export type StockUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The filter to search for the Stock to update in case it exists.
     */
    where: StockWhereUniqueInput
    /**
     * In case the Stock found by the `where` argument doesn't exist, create a new Stock with this data.
     */
    create: XOR<StockCreateInput, StockUncheckedCreateInput>
    /**
     * In case the Stock was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StockUpdateInput, StockUncheckedUpdateInput>
  }

  /**
   * Stock delete
   */
  export type StockDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter which Stock to delete.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock deleteMany
   */
  export type StockDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stocks to delete
     */
    where?: StockWhereInput
  }

  /**
   * Stock.location
   */
  export type Stock$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
  }

  /**
   * Stock.consumptionPlans
   */
  export type Stock$consumptionPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumptionPlan
     */
    select?: ConsumptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumptionPlanInclude<ExtArgs> | null
    where?: ConsumptionPlanWhereInput
    orderBy?: ConsumptionPlanOrderByWithRelationInput | ConsumptionPlanOrderByWithRelationInput[]
    cursor?: ConsumptionPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsumptionPlanScalarFieldEnum | ConsumptionPlanScalarFieldEnum[]
  }

  /**
   * Stock without action
   */
  export type StockDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
  }


  /**
   * Model ConsumptionPlan
   */

  export type AggregateConsumptionPlan = {
    _count: ConsumptionPlanCountAggregateOutputType | null
    _avg: ConsumptionPlanAvgAggregateOutputType | null
    _sum: ConsumptionPlanSumAggregateOutputType | null
    _min: ConsumptionPlanMinAggregateOutputType | null
    _max: ConsumptionPlanMaxAggregateOutputType | null
  }

  export type ConsumptionPlanAvgAggregateOutputType = {
    id: number | null
    personId: number | null
    stockId: number | null
    servingsPerDay: number | null
  }

  export type ConsumptionPlanSumAggregateOutputType = {
    id: number | null
    personId: number | null
    stockId: number | null
    servingsPerDay: number | null
  }

  export type ConsumptionPlanMinAggregateOutputType = {
    id: number | null
    personId: number | null
    stockId: number | null
    servingsPerDay: number | null
    startDate: Date | null
    endDate: Date | null
  }

  export type ConsumptionPlanMaxAggregateOutputType = {
    id: number | null
    personId: number | null
    stockId: number | null
    servingsPerDay: number | null
    startDate: Date | null
    endDate: Date | null
  }

  export type ConsumptionPlanCountAggregateOutputType = {
    id: number
    personId: number
    stockId: number
    servingsPerDay: number
    startDate: number
    endDate: number
    _all: number
  }


  export type ConsumptionPlanAvgAggregateInputType = {
    id?: true
    personId?: true
    stockId?: true
    servingsPerDay?: true
  }

  export type ConsumptionPlanSumAggregateInputType = {
    id?: true
    personId?: true
    stockId?: true
    servingsPerDay?: true
  }

  export type ConsumptionPlanMinAggregateInputType = {
    id?: true
    personId?: true
    stockId?: true
    servingsPerDay?: true
    startDate?: true
    endDate?: true
  }

  export type ConsumptionPlanMaxAggregateInputType = {
    id?: true
    personId?: true
    stockId?: true
    servingsPerDay?: true
    startDate?: true
    endDate?: true
  }

  export type ConsumptionPlanCountAggregateInputType = {
    id?: true
    personId?: true
    stockId?: true
    servingsPerDay?: true
    startDate?: true
    endDate?: true
    _all?: true
  }

  export type ConsumptionPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsumptionPlan to aggregate.
     */
    where?: ConsumptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumptionPlans to fetch.
     */
    orderBy?: ConsumptionPlanOrderByWithRelationInput | ConsumptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsumptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConsumptionPlans
    **/
    _count?: true | ConsumptionPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConsumptionPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConsumptionPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsumptionPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsumptionPlanMaxAggregateInputType
  }

  export type GetConsumptionPlanAggregateType<T extends ConsumptionPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateConsumptionPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsumptionPlan[P]>
      : GetScalarType<T[P], AggregateConsumptionPlan[P]>
  }




  export type ConsumptionPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsumptionPlanWhereInput
    orderBy?: ConsumptionPlanOrderByWithAggregationInput | ConsumptionPlanOrderByWithAggregationInput[]
    by: ConsumptionPlanScalarFieldEnum[] | ConsumptionPlanScalarFieldEnum
    having?: ConsumptionPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsumptionPlanCountAggregateInputType | true
    _avg?: ConsumptionPlanAvgAggregateInputType
    _sum?: ConsumptionPlanSumAggregateInputType
    _min?: ConsumptionPlanMinAggregateInputType
    _max?: ConsumptionPlanMaxAggregateInputType
  }

  export type ConsumptionPlanGroupByOutputType = {
    id: number
    personId: number
    stockId: number
    servingsPerDay: number
    startDate: Date
    endDate: Date | null
    _count: ConsumptionPlanCountAggregateOutputType | null
    _avg: ConsumptionPlanAvgAggregateOutputType | null
    _sum: ConsumptionPlanSumAggregateOutputType | null
    _min: ConsumptionPlanMinAggregateOutputType | null
    _max: ConsumptionPlanMaxAggregateOutputType | null
  }

  type GetConsumptionPlanGroupByPayload<T extends ConsumptionPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsumptionPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsumptionPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsumptionPlanGroupByOutputType[P]>
            : GetScalarType<T[P], ConsumptionPlanGroupByOutputType[P]>
        }
      >
    >


  export type ConsumptionPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personId?: boolean
    stockId?: boolean
    servingsPerDay?: boolean
    startDate?: boolean
    endDate?: boolean
    person?: boolean | PersonDefaultArgs<ExtArgs>
    stock?: boolean | StockDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consumptionPlan"]>

  export type ConsumptionPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personId?: boolean
    stockId?: boolean
    servingsPerDay?: boolean
    startDate?: boolean
    endDate?: boolean
    person?: boolean | PersonDefaultArgs<ExtArgs>
    stock?: boolean | StockDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consumptionPlan"]>

  export type ConsumptionPlanSelectScalar = {
    id?: boolean
    personId?: boolean
    stockId?: boolean
    servingsPerDay?: boolean
    startDate?: boolean
    endDate?: boolean
  }

  export type ConsumptionPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    person?: boolean | PersonDefaultArgs<ExtArgs>
    stock?: boolean | StockDefaultArgs<ExtArgs>
  }
  export type ConsumptionPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    person?: boolean | PersonDefaultArgs<ExtArgs>
    stock?: boolean | StockDefaultArgs<ExtArgs>
  }

  export type $ConsumptionPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConsumptionPlan"
    objects: {
      person: Prisma.$PersonPayload<ExtArgs>
      stock: Prisma.$StockPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      personId: number
      stockId: number
      servingsPerDay: number
      startDate: Date
      endDate: Date | null
    }, ExtArgs["result"]["consumptionPlan"]>
    composites: {}
  }

  type ConsumptionPlanGetPayload<S extends boolean | null | undefined | ConsumptionPlanDefaultArgs> = $Result.GetResult<Prisma.$ConsumptionPlanPayload, S>

  type ConsumptionPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConsumptionPlanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConsumptionPlanCountAggregateInputType | true
    }

  export interface ConsumptionPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConsumptionPlan'], meta: { name: 'ConsumptionPlan' } }
    /**
     * Find zero or one ConsumptionPlan that matches the filter.
     * @param {ConsumptionPlanFindUniqueArgs} args - Arguments to find a ConsumptionPlan
     * @example
     * // Get one ConsumptionPlan
     * const consumptionPlan = await prisma.consumptionPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsumptionPlanFindUniqueArgs>(args: SelectSubset<T, ConsumptionPlanFindUniqueArgs<ExtArgs>>): Prisma__ConsumptionPlanClient<$Result.GetResult<Prisma.$ConsumptionPlanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ConsumptionPlan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConsumptionPlanFindUniqueOrThrowArgs} args - Arguments to find a ConsumptionPlan
     * @example
     * // Get one ConsumptionPlan
     * const consumptionPlan = await prisma.consumptionPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsumptionPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsumptionPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsumptionPlanClient<$Result.GetResult<Prisma.$ConsumptionPlanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ConsumptionPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumptionPlanFindFirstArgs} args - Arguments to find a ConsumptionPlan
     * @example
     * // Get one ConsumptionPlan
     * const consumptionPlan = await prisma.consumptionPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsumptionPlanFindFirstArgs>(args?: SelectSubset<T, ConsumptionPlanFindFirstArgs<ExtArgs>>): Prisma__ConsumptionPlanClient<$Result.GetResult<Prisma.$ConsumptionPlanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ConsumptionPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumptionPlanFindFirstOrThrowArgs} args - Arguments to find a ConsumptionPlan
     * @example
     * // Get one ConsumptionPlan
     * const consumptionPlan = await prisma.consumptionPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsumptionPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsumptionPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsumptionPlanClient<$Result.GetResult<Prisma.$ConsumptionPlanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ConsumptionPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumptionPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConsumptionPlans
     * const consumptionPlans = await prisma.consumptionPlan.findMany()
     * 
     * // Get first 10 ConsumptionPlans
     * const consumptionPlans = await prisma.consumptionPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consumptionPlanWithIdOnly = await prisma.consumptionPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsumptionPlanFindManyArgs>(args?: SelectSubset<T, ConsumptionPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumptionPlanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ConsumptionPlan.
     * @param {ConsumptionPlanCreateArgs} args - Arguments to create a ConsumptionPlan.
     * @example
     * // Create one ConsumptionPlan
     * const ConsumptionPlan = await prisma.consumptionPlan.create({
     *   data: {
     *     // ... data to create a ConsumptionPlan
     *   }
     * })
     * 
     */
    create<T extends ConsumptionPlanCreateArgs>(args: SelectSubset<T, ConsumptionPlanCreateArgs<ExtArgs>>): Prisma__ConsumptionPlanClient<$Result.GetResult<Prisma.$ConsumptionPlanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ConsumptionPlans.
     * @param {ConsumptionPlanCreateManyArgs} args - Arguments to create many ConsumptionPlans.
     * @example
     * // Create many ConsumptionPlans
     * const consumptionPlan = await prisma.consumptionPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsumptionPlanCreateManyArgs>(args?: SelectSubset<T, ConsumptionPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConsumptionPlans and returns the data saved in the database.
     * @param {ConsumptionPlanCreateManyAndReturnArgs} args - Arguments to create many ConsumptionPlans.
     * @example
     * // Create many ConsumptionPlans
     * const consumptionPlan = await prisma.consumptionPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConsumptionPlans and only return the `id`
     * const consumptionPlanWithIdOnly = await prisma.consumptionPlan.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsumptionPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsumptionPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumptionPlanPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ConsumptionPlan.
     * @param {ConsumptionPlanDeleteArgs} args - Arguments to delete one ConsumptionPlan.
     * @example
     * // Delete one ConsumptionPlan
     * const ConsumptionPlan = await prisma.consumptionPlan.delete({
     *   where: {
     *     // ... filter to delete one ConsumptionPlan
     *   }
     * })
     * 
     */
    delete<T extends ConsumptionPlanDeleteArgs>(args: SelectSubset<T, ConsumptionPlanDeleteArgs<ExtArgs>>): Prisma__ConsumptionPlanClient<$Result.GetResult<Prisma.$ConsumptionPlanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ConsumptionPlan.
     * @param {ConsumptionPlanUpdateArgs} args - Arguments to update one ConsumptionPlan.
     * @example
     * // Update one ConsumptionPlan
     * const consumptionPlan = await prisma.consumptionPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsumptionPlanUpdateArgs>(args: SelectSubset<T, ConsumptionPlanUpdateArgs<ExtArgs>>): Prisma__ConsumptionPlanClient<$Result.GetResult<Prisma.$ConsumptionPlanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ConsumptionPlans.
     * @param {ConsumptionPlanDeleteManyArgs} args - Arguments to filter ConsumptionPlans to delete.
     * @example
     * // Delete a few ConsumptionPlans
     * const { count } = await prisma.consumptionPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsumptionPlanDeleteManyArgs>(args?: SelectSubset<T, ConsumptionPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsumptionPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumptionPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConsumptionPlans
     * const consumptionPlan = await prisma.consumptionPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsumptionPlanUpdateManyArgs>(args: SelectSubset<T, ConsumptionPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ConsumptionPlan.
     * @param {ConsumptionPlanUpsertArgs} args - Arguments to update or create a ConsumptionPlan.
     * @example
     * // Update or create a ConsumptionPlan
     * const consumptionPlan = await prisma.consumptionPlan.upsert({
     *   create: {
     *     // ... data to create a ConsumptionPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConsumptionPlan we want to update
     *   }
     * })
     */
    upsert<T extends ConsumptionPlanUpsertArgs>(args: SelectSubset<T, ConsumptionPlanUpsertArgs<ExtArgs>>): Prisma__ConsumptionPlanClient<$Result.GetResult<Prisma.$ConsumptionPlanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ConsumptionPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumptionPlanCountArgs} args - Arguments to filter ConsumptionPlans to count.
     * @example
     * // Count the number of ConsumptionPlans
     * const count = await prisma.consumptionPlan.count({
     *   where: {
     *     // ... the filter for the ConsumptionPlans we want to count
     *   }
     * })
    **/
    count<T extends ConsumptionPlanCountArgs>(
      args?: Subset<T, ConsumptionPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsumptionPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConsumptionPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumptionPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsumptionPlanAggregateArgs>(args: Subset<T, ConsumptionPlanAggregateArgs>): Prisma.PrismaPromise<GetConsumptionPlanAggregateType<T>>

    /**
     * Group by ConsumptionPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumptionPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsumptionPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsumptionPlanGroupByArgs['orderBy'] }
        : { orderBy?: ConsumptionPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsumptionPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsumptionPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConsumptionPlan model
   */
  readonly fields: ConsumptionPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConsumptionPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsumptionPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    person<T extends PersonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonDefaultArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    stock<T extends StockDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StockDefaultArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConsumptionPlan model
   */ 
  interface ConsumptionPlanFieldRefs {
    readonly id: FieldRef<"ConsumptionPlan", 'Int'>
    readonly personId: FieldRef<"ConsumptionPlan", 'Int'>
    readonly stockId: FieldRef<"ConsumptionPlan", 'Int'>
    readonly servingsPerDay: FieldRef<"ConsumptionPlan", 'Float'>
    readonly startDate: FieldRef<"ConsumptionPlan", 'DateTime'>
    readonly endDate: FieldRef<"ConsumptionPlan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ConsumptionPlan findUnique
   */
  export type ConsumptionPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumptionPlan
     */
    select?: ConsumptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which ConsumptionPlan to fetch.
     */
    where: ConsumptionPlanWhereUniqueInput
  }

  /**
   * ConsumptionPlan findUniqueOrThrow
   */
  export type ConsumptionPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumptionPlan
     */
    select?: ConsumptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which ConsumptionPlan to fetch.
     */
    where: ConsumptionPlanWhereUniqueInput
  }

  /**
   * ConsumptionPlan findFirst
   */
  export type ConsumptionPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumptionPlan
     */
    select?: ConsumptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which ConsumptionPlan to fetch.
     */
    where?: ConsumptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumptionPlans to fetch.
     */
    orderBy?: ConsumptionPlanOrderByWithRelationInput | ConsumptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsumptionPlans.
     */
    cursor?: ConsumptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsumptionPlans.
     */
    distinct?: ConsumptionPlanScalarFieldEnum | ConsumptionPlanScalarFieldEnum[]
  }

  /**
   * ConsumptionPlan findFirstOrThrow
   */
  export type ConsumptionPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumptionPlan
     */
    select?: ConsumptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which ConsumptionPlan to fetch.
     */
    where?: ConsumptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumptionPlans to fetch.
     */
    orderBy?: ConsumptionPlanOrderByWithRelationInput | ConsumptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsumptionPlans.
     */
    cursor?: ConsumptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsumptionPlans.
     */
    distinct?: ConsumptionPlanScalarFieldEnum | ConsumptionPlanScalarFieldEnum[]
  }

  /**
   * ConsumptionPlan findMany
   */
  export type ConsumptionPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumptionPlan
     */
    select?: ConsumptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which ConsumptionPlans to fetch.
     */
    where?: ConsumptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumptionPlans to fetch.
     */
    orderBy?: ConsumptionPlanOrderByWithRelationInput | ConsumptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConsumptionPlans.
     */
    cursor?: ConsumptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumptionPlans.
     */
    skip?: number
    distinct?: ConsumptionPlanScalarFieldEnum | ConsumptionPlanScalarFieldEnum[]
  }

  /**
   * ConsumptionPlan create
   */
  export type ConsumptionPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumptionPlan
     */
    select?: ConsumptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumptionPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a ConsumptionPlan.
     */
    data: XOR<ConsumptionPlanCreateInput, ConsumptionPlanUncheckedCreateInput>
  }

  /**
   * ConsumptionPlan createMany
   */
  export type ConsumptionPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConsumptionPlans.
     */
    data: ConsumptionPlanCreateManyInput | ConsumptionPlanCreateManyInput[]
  }

  /**
   * ConsumptionPlan createManyAndReturn
   */
  export type ConsumptionPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumptionPlan
     */
    select?: ConsumptionPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ConsumptionPlans.
     */
    data: ConsumptionPlanCreateManyInput | ConsumptionPlanCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumptionPlanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConsumptionPlan update
   */
  export type ConsumptionPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumptionPlan
     */
    select?: ConsumptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumptionPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a ConsumptionPlan.
     */
    data: XOR<ConsumptionPlanUpdateInput, ConsumptionPlanUncheckedUpdateInput>
    /**
     * Choose, which ConsumptionPlan to update.
     */
    where: ConsumptionPlanWhereUniqueInput
  }

  /**
   * ConsumptionPlan updateMany
   */
  export type ConsumptionPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConsumptionPlans.
     */
    data: XOR<ConsumptionPlanUpdateManyMutationInput, ConsumptionPlanUncheckedUpdateManyInput>
    /**
     * Filter which ConsumptionPlans to update
     */
    where?: ConsumptionPlanWhereInput
  }

  /**
   * ConsumptionPlan upsert
   */
  export type ConsumptionPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumptionPlan
     */
    select?: ConsumptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumptionPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the ConsumptionPlan to update in case it exists.
     */
    where: ConsumptionPlanWhereUniqueInput
    /**
     * In case the ConsumptionPlan found by the `where` argument doesn't exist, create a new ConsumptionPlan with this data.
     */
    create: XOR<ConsumptionPlanCreateInput, ConsumptionPlanUncheckedCreateInput>
    /**
     * In case the ConsumptionPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsumptionPlanUpdateInput, ConsumptionPlanUncheckedUpdateInput>
  }

  /**
   * ConsumptionPlan delete
   */
  export type ConsumptionPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumptionPlan
     */
    select?: ConsumptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumptionPlanInclude<ExtArgs> | null
    /**
     * Filter which ConsumptionPlan to delete.
     */
    where: ConsumptionPlanWhereUniqueInput
  }

  /**
   * ConsumptionPlan deleteMany
   */
  export type ConsumptionPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsumptionPlans to delete
     */
    where?: ConsumptionPlanWhereInput
  }

  /**
   * ConsumptionPlan without action
   */
  export type ConsumptionPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumptionPlan
     */
    select?: ConsumptionPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumptionPlanInclude<ExtArgs> | null
  }


  /**
   * Model Supply
   */

  export type AggregateSupply = {
    _count: SupplyCountAggregateOutputType | null
    _avg: SupplyAvgAggregateOutputType | null
    _sum: SupplySumAggregateOutputType | null
    _min: SupplyMinAggregateOutputType | null
    _max: SupplyMaxAggregateOutputType | null
  }

  export type SupplyAvgAggregateOutputType = {
    id: number | null
    quantity: number | null
    categoryId: number | null
    locationId: number | null
  }

  export type SupplySumAggregateOutputType = {
    id: number | null
    quantity: number | null
    categoryId: number | null
    locationId: number | null
  }

  export type SupplyMinAggregateOutputType = {
    id: number | null
    name: string | null
    quantity: number | null
    unit: string | null
    expiryDate: Date | null
    notes: string | null
    categoryId: number | null
    locationId: number | null
  }

  export type SupplyMaxAggregateOutputType = {
    id: number | null
    name: string | null
    quantity: number | null
    unit: string | null
    expiryDate: Date | null
    notes: string | null
    categoryId: number | null
    locationId: number | null
  }

  export type SupplyCountAggregateOutputType = {
    id: number
    name: number
    quantity: number
    unit: number
    expiryDate: number
    notes: number
    categoryId: number
    locationId: number
    _all: number
  }


  export type SupplyAvgAggregateInputType = {
    id?: true
    quantity?: true
    categoryId?: true
    locationId?: true
  }

  export type SupplySumAggregateInputType = {
    id?: true
    quantity?: true
    categoryId?: true
    locationId?: true
  }

  export type SupplyMinAggregateInputType = {
    id?: true
    name?: true
    quantity?: true
    unit?: true
    expiryDate?: true
    notes?: true
    categoryId?: true
    locationId?: true
  }

  export type SupplyMaxAggregateInputType = {
    id?: true
    name?: true
    quantity?: true
    unit?: true
    expiryDate?: true
    notes?: true
    categoryId?: true
    locationId?: true
  }

  export type SupplyCountAggregateInputType = {
    id?: true
    name?: true
    quantity?: true
    unit?: true
    expiryDate?: true
    notes?: true
    categoryId?: true
    locationId?: true
    _all?: true
  }

  export type SupplyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Supply to aggregate.
     */
    where?: SupplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supplies to fetch.
     */
    orderBy?: SupplyOrderByWithRelationInput | SupplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SupplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Supplies
    **/
    _count?: true | SupplyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SupplyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SupplySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SupplyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SupplyMaxAggregateInputType
  }

  export type GetSupplyAggregateType<T extends SupplyAggregateArgs> = {
        [P in keyof T & keyof AggregateSupply]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupply[P]>
      : GetScalarType<T[P], AggregateSupply[P]>
  }




  export type SupplyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplyWhereInput
    orderBy?: SupplyOrderByWithAggregationInput | SupplyOrderByWithAggregationInput[]
    by: SupplyScalarFieldEnum[] | SupplyScalarFieldEnum
    having?: SupplyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SupplyCountAggregateInputType | true
    _avg?: SupplyAvgAggregateInputType
    _sum?: SupplySumAggregateInputType
    _min?: SupplyMinAggregateInputType
    _max?: SupplyMaxAggregateInputType
  }

  export type SupplyGroupByOutputType = {
    id: number
    name: string
    quantity: number
    unit: string | null
    expiryDate: Date | null
    notes: string | null
    categoryId: number | null
    locationId: number | null
    _count: SupplyCountAggregateOutputType | null
    _avg: SupplyAvgAggregateOutputType | null
    _sum: SupplySumAggregateOutputType | null
    _min: SupplyMinAggregateOutputType | null
    _max: SupplyMaxAggregateOutputType | null
  }

  type GetSupplyGroupByPayload<T extends SupplyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SupplyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SupplyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SupplyGroupByOutputType[P]>
            : GetScalarType<T[P], SupplyGroupByOutputType[P]>
        }
      >
    >


  export type SupplySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    quantity?: boolean
    unit?: boolean
    expiryDate?: boolean
    notes?: boolean
    categoryId?: boolean
    locationId?: boolean
    category?: boolean | Supply$categoryArgs<ExtArgs>
    location?: boolean | Supply$locationArgs<ExtArgs>
  }, ExtArgs["result"]["supply"]>

  export type SupplySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    quantity?: boolean
    unit?: boolean
    expiryDate?: boolean
    notes?: boolean
    categoryId?: boolean
    locationId?: boolean
    category?: boolean | Supply$categoryArgs<ExtArgs>
    location?: boolean | Supply$locationArgs<ExtArgs>
  }, ExtArgs["result"]["supply"]>

  export type SupplySelectScalar = {
    id?: boolean
    name?: boolean
    quantity?: boolean
    unit?: boolean
    expiryDate?: boolean
    notes?: boolean
    categoryId?: boolean
    locationId?: boolean
  }

  export type SupplyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | Supply$categoryArgs<ExtArgs>
    location?: boolean | Supply$locationArgs<ExtArgs>
  }
  export type SupplyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | Supply$categoryArgs<ExtArgs>
    location?: boolean | Supply$locationArgs<ExtArgs>
  }

  export type $SupplyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Supply"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs> | null
      location: Prisma.$LocationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      quantity: number
      unit: string | null
      expiryDate: Date | null
      notes: string | null
      categoryId: number | null
      locationId: number | null
    }, ExtArgs["result"]["supply"]>
    composites: {}
  }

  type SupplyGetPayload<S extends boolean | null | undefined | SupplyDefaultArgs> = $Result.GetResult<Prisma.$SupplyPayload, S>

  type SupplyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SupplyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SupplyCountAggregateInputType | true
    }

  export interface SupplyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Supply'], meta: { name: 'Supply' } }
    /**
     * Find zero or one Supply that matches the filter.
     * @param {SupplyFindUniqueArgs} args - Arguments to find a Supply
     * @example
     * // Get one Supply
     * const supply = await prisma.supply.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SupplyFindUniqueArgs>(args: SelectSubset<T, SupplyFindUniqueArgs<ExtArgs>>): Prisma__SupplyClient<$Result.GetResult<Prisma.$SupplyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Supply that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SupplyFindUniqueOrThrowArgs} args - Arguments to find a Supply
     * @example
     * // Get one Supply
     * const supply = await prisma.supply.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SupplyFindUniqueOrThrowArgs>(args: SelectSubset<T, SupplyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SupplyClient<$Result.GetResult<Prisma.$SupplyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Supply that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplyFindFirstArgs} args - Arguments to find a Supply
     * @example
     * // Get one Supply
     * const supply = await prisma.supply.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SupplyFindFirstArgs>(args?: SelectSubset<T, SupplyFindFirstArgs<ExtArgs>>): Prisma__SupplyClient<$Result.GetResult<Prisma.$SupplyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Supply that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplyFindFirstOrThrowArgs} args - Arguments to find a Supply
     * @example
     * // Get one Supply
     * const supply = await prisma.supply.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SupplyFindFirstOrThrowArgs>(args?: SelectSubset<T, SupplyFindFirstOrThrowArgs<ExtArgs>>): Prisma__SupplyClient<$Result.GetResult<Prisma.$SupplyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Supplies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Supplies
     * const supplies = await prisma.supply.findMany()
     * 
     * // Get first 10 Supplies
     * const supplies = await prisma.supply.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const supplyWithIdOnly = await prisma.supply.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SupplyFindManyArgs>(args?: SelectSubset<T, SupplyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Supply.
     * @param {SupplyCreateArgs} args - Arguments to create a Supply.
     * @example
     * // Create one Supply
     * const Supply = await prisma.supply.create({
     *   data: {
     *     // ... data to create a Supply
     *   }
     * })
     * 
     */
    create<T extends SupplyCreateArgs>(args: SelectSubset<T, SupplyCreateArgs<ExtArgs>>): Prisma__SupplyClient<$Result.GetResult<Prisma.$SupplyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Supplies.
     * @param {SupplyCreateManyArgs} args - Arguments to create many Supplies.
     * @example
     * // Create many Supplies
     * const supply = await prisma.supply.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SupplyCreateManyArgs>(args?: SelectSubset<T, SupplyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Supplies and returns the data saved in the database.
     * @param {SupplyCreateManyAndReturnArgs} args - Arguments to create many Supplies.
     * @example
     * // Create many Supplies
     * const supply = await prisma.supply.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Supplies and only return the `id`
     * const supplyWithIdOnly = await prisma.supply.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SupplyCreateManyAndReturnArgs>(args?: SelectSubset<T, SupplyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Supply.
     * @param {SupplyDeleteArgs} args - Arguments to delete one Supply.
     * @example
     * // Delete one Supply
     * const Supply = await prisma.supply.delete({
     *   where: {
     *     // ... filter to delete one Supply
     *   }
     * })
     * 
     */
    delete<T extends SupplyDeleteArgs>(args: SelectSubset<T, SupplyDeleteArgs<ExtArgs>>): Prisma__SupplyClient<$Result.GetResult<Prisma.$SupplyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Supply.
     * @param {SupplyUpdateArgs} args - Arguments to update one Supply.
     * @example
     * // Update one Supply
     * const supply = await prisma.supply.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SupplyUpdateArgs>(args: SelectSubset<T, SupplyUpdateArgs<ExtArgs>>): Prisma__SupplyClient<$Result.GetResult<Prisma.$SupplyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Supplies.
     * @param {SupplyDeleteManyArgs} args - Arguments to filter Supplies to delete.
     * @example
     * // Delete a few Supplies
     * const { count } = await prisma.supply.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SupplyDeleteManyArgs>(args?: SelectSubset<T, SupplyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Supplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Supplies
     * const supply = await prisma.supply.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SupplyUpdateManyArgs>(args: SelectSubset<T, SupplyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Supply.
     * @param {SupplyUpsertArgs} args - Arguments to update or create a Supply.
     * @example
     * // Update or create a Supply
     * const supply = await prisma.supply.upsert({
     *   create: {
     *     // ... data to create a Supply
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Supply we want to update
     *   }
     * })
     */
    upsert<T extends SupplyUpsertArgs>(args: SelectSubset<T, SupplyUpsertArgs<ExtArgs>>): Prisma__SupplyClient<$Result.GetResult<Prisma.$SupplyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Supplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplyCountArgs} args - Arguments to filter Supplies to count.
     * @example
     * // Count the number of Supplies
     * const count = await prisma.supply.count({
     *   where: {
     *     // ... the filter for the Supplies we want to count
     *   }
     * })
    **/
    count<T extends SupplyCountArgs>(
      args?: Subset<T, SupplyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SupplyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Supply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SupplyAggregateArgs>(args: Subset<T, SupplyAggregateArgs>): Prisma.PrismaPromise<GetSupplyAggregateType<T>>

    /**
     * Group by Supply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SupplyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SupplyGroupByArgs['orderBy'] }
        : { orderBy?: SupplyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SupplyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupplyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Supply model
   */
  readonly fields: SupplyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Supply.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SupplyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends Supply$categoryArgs<ExtArgs> = {}>(args?: Subset<T, Supply$categoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    location<T extends Supply$locationArgs<ExtArgs> = {}>(args?: Subset<T, Supply$locationArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Supply model
   */ 
  interface SupplyFieldRefs {
    readonly id: FieldRef<"Supply", 'Int'>
    readonly name: FieldRef<"Supply", 'String'>
    readonly quantity: FieldRef<"Supply", 'Int'>
    readonly unit: FieldRef<"Supply", 'String'>
    readonly expiryDate: FieldRef<"Supply", 'DateTime'>
    readonly notes: FieldRef<"Supply", 'String'>
    readonly categoryId: FieldRef<"Supply", 'Int'>
    readonly locationId: FieldRef<"Supply", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Supply findUnique
   */
  export type SupplyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supply
     */
    select?: SupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplyInclude<ExtArgs> | null
    /**
     * Filter, which Supply to fetch.
     */
    where: SupplyWhereUniqueInput
  }

  /**
   * Supply findUniqueOrThrow
   */
  export type SupplyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supply
     */
    select?: SupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplyInclude<ExtArgs> | null
    /**
     * Filter, which Supply to fetch.
     */
    where: SupplyWhereUniqueInput
  }

  /**
   * Supply findFirst
   */
  export type SupplyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supply
     */
    select?: SupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplyInclude<ExtArgs> | null
    /**
     * Filter, which Supply to fetch.
     */
    where?: SupplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supplies to fetch.
     */
    orderBy?: SupplyOrderByWithRelationInput | SupplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Supplies.
     */
    cursor?: SupplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Supplies.
     */
    distinct?: SupplyScalarFieldEnum | SupplyScalarFieldEnum[]
  }

  /**
   * Supply findFirstOrThrow
   */
  export type SupplyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supply
     */
    select?: SupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplyInclude<ExtArgs> | null
    /**
     * Filter, which Supply to fetch.
     */
    where?: SupplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supplies to fetch.
     */
    orderBy?: SupplyOrderByWithRelationInput | SupplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Supplies.
     */
    cursor?: SupplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Supplies.
     */
    distinct?: SupplyScalarFieldEnum | SupplyScalarFieldEnum[]
  }

  /**
   * Supply findMany
   */
  export type SupplyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supply
     */
    select?: SupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplyInclude<ExtArgs> | null
    /**
     * Filter, which Supplies to fetch.
     */
    where?: SupplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supplies to fetch.
     */
    orderBy?: SupplyOrderByWithRelationInput | SupplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Supplies.
     */
    cursor?: SupplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supplies.
     */
    skip?: number
    distinct?: SupplyScalarFieldEnum | SupplyScalarFieldEnum[]
  }

  /**
   * Supply create
   */
  export type SupplyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supply
     */
    select?: SupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplyInclude<ExtArgs> | null
    /**
     * The data needed to create a Supply.
     */
    data: XOR<SupplyCreateInput, SupplyUncheckedCreateInput>
  }

  /**
   * Supply createMany
   */
  export type SupplyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Supplies.
     */
    data: SupplyCreateManyInput | SupplyCreateManyInput[]
  }

  /**
   * Supply createManyAndReturn
   */
  export type SupplyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supply
     */
    select?: SupplySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Supplies.
     */
    data: SupplyCreateManyInput | SupplyCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Supply update
   */
  export type SupplyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supply
     */
    select?: SupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplyInclude<ExtArgs> | null
    /**
     * The data needed to update a Supply.
     */
    data: XOR<SupplyUpdateInput, SupplyUncheckedUpdateInput>
    /**
     * Choose, which Supply to update.
     */
    where: SupplyWhereUniqueInput
  }

  /**
   * Supply updateMany
   */
  export type SupplyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Supplies.
     */
    data: XOR<SupplyUpdateManyMutationInput, SupplyUncheckedUpdateManyInput>
    /**
     * Filter which Supplies to update
     */
    where?: SupplyWhereInput
  }

  /**
   * Supply upsert
   */
  export type SupplyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supply
     */
    select?: SupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplyInclude<ExtArgs> | null
    /**
     * The filter to search for the Supply to update in case it exists.
     */
    where: SupplyWhereUniqueInput
    /**
     * In case the Supply found by the `where` argument doesn't exist, create a new Supply with this data.
     */
    create: XOR<SupplyCreateInput, SupplyUncheckedCreateInput>
    /**
     * In case the Supply was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SupplyUpdateInput, SupplyUncheckedUpdateInput>
  }

  /**
   * Supply delete
   */
  export type SupplyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supply
     */
    select?: SupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplyInclude<ExtArgs> | null
    /**
     * Filter which Supply to delete.
     */
    where: SupplyWhereUniqueInput
  }

  /**
   * Supply deleteMany
   */
  export type SupplyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Supplies to delete
     */
    where?: SupplyWhereInput
  }

  /**
   * Supply.category
   */
  export type Supply$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Supply.location
   */
  export type Supply$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
  }

  /**
   * Supply without action
   */
  export type SupplyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supply
     */
    select?: SupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplyInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PersonScalarFieldEnum: {
    id: 'id',
    name: 'name',
    age: 'age',
    dietaryRestrictions: 'dietaryRestrictions',
    dailyConsumption: 'dailyConsumption'
  };

  export type PersonScalarFieldEnum = (typeof PersonScalarFieldEnum)[keyof typeof PersonScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const FoodItemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    quantity: 'quantity',
    unit: 'unit',
    caloriesPerUnit: 'caloriesPerUnit',
    expiryDate: 'expiryDate',
    protein: 'protein',
    carbs: 'carbs',
    fat: 'fat',
    servingSize: 'servingSize',
    servingsPerUnit: 'servingsPerUnit',
    barcode: 'barcode',
    notes: 'notes',
    categoryId: 'categoryId',
    locationId: 'locationId'
  };

  export type FoodItemScalarFieldEnum = (typeof FoodItemScalarFieldEnum)[keyof typeof FoodItemScalarFieldEnum]


  export const FoodScalarFieldEnum: {
    id: 'id',
    name: 'name',
    brand: 'brand',
    upc: 'upc',
    categoryId: 'categoryId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FoodScalarFieldEnum = (typeof FoodScalarFieldEnum)[keyof typeof FoodScalarFieldEnum]


  export const NutritionFactScalarFieldEnum: {
    id: 'id',
    foodId: 'foodId',
    calories: 'calories',
    protein: 'protein',
    carbs: 'carbs',
    fat: 'fat',
    fiber: 'fiber',
    sodium: 'sodium',
    servingSize: 'servingSize',
    servingsPerUnit: 'servingsPerUnit',
    fetchedAt: 'fetchedAt'
  };

  export type NutritionFactScalarFieldEnum = (typeof NutritionFactScalarFieldEnum)[keyof typeof NutritionFactScalarFieldEnum]


  export const StockScalarFieldEnum: {
    id: 'id',
    foodId: 'foodId',
    quantity: 'quantity',
    locationId: 'locationId',
    expiryDate: 'expiryDate',
    servingsRemaining: 'servingsRemaining',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StockScalarFieldEnum = (typeof StockScalarFieldEnum)[keyof typeof StockScalarFieldEnum]


  export const ConsumptionPlanScalarFieldEnum: {
    id: 'id',
    personId: 'personId',
    stockId: 'stockId',
    servingsPerDay: 'servingsPerDay',
    startDate: 'startDate',
    endDate: 'endDate'
  };

  export type ConsumptionPlanScalarFieldEnum = (typeof ConsumptionPlanScalarFieldEnum)[keyof typeof ConsumptionPlanScalarFieldEnum]


  export const SupplyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    quantity: 'quantity',
    unit: 'unit',
    expiryDate: 'expiryDate',
    notes: 'notes',
    categoryId: 'categoryId',
    locationId: 'locationId'
  };

  export type SupplyScalarFieldEnum = (typeof SupplyScalarFieldEnum)[keyof typeof SupplyScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type PersonWhereInput = {
    AND?: PersonWhereInput | PersonWhereInput[]
    OR?: PersonWhereInput[]
    NOT?: PersonWhereInput | PersonWhereInput[]
    id?: IntFilter<"Person"> | number
    name?: StringFilter<"Person"> | string
    age?: IntFilter<"Person"> | number
    dietaryRestrictions?: StringNullableFilter<"Person"> | string | null
    dailyConsumption?: IntFilter<"Person"> | number
    consumptionPlans?: ConsumptionPlanListRelationFilter
  }

  export type PersonOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    dietaryRestrictions?: SortOrderInput | SortOrder
    dailyConsumption?: SortOrder
    consumptionPlans?: ConsumptionPlanOrderByRelationAggregateInput
  }

  export type PersonWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PersonWhereInput | PersonWhereInput[]
    OR?: PersonWhereInput[]
    NOT?: PersonWhereInput | PersonWhereInput[]
    name?: StringFilter<"Person"> | string
    age?: IntFilter<"Person"> | number
    dietaryRestrictions?: StringNullableFilter<"Person"> | string | null
    dailyConsumption?: IntFilter<"Person"> | number
    consumptionPlans?: ConsumptionPlanListRelationFilter
  }, "id">

  export type PersonOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    dietaryRestrictions?: SortOrderInput | SortOrder
    dailyConsumption?: SortOrder
    _count?: PersonCountOrderByAggregateInput
    _avg?: PersonAvgOrderByAggregateInput
    _max?: PersonMaxOrderByAggregateInput
    _min?: PersonMinOrderByAggregateInput
    _sum?: PersonSumOrderByAggregateInput
  }

  export type PersonScalarWhereWithAggregatesInput = {
    AND?: PersonScalarWhereWithAggregatesInput | PersonScalarWhereWithAggregatesInput[]
    OR?: PersonScalarWhereWithAggregatesInput[]
    NOT?: PersonScalarWhereWithAggregatesInput | PersonScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Person"> | number
    name?: StringWithAggregatesFilter<"Person"> | string
    age?: IntWithAggregatesFilter<"Person"> | number
    dietaryRestrictions?: StringNullableWithAggregatesFilter<"Person"> | string | null
    dailyConsumption?: IntWithAggregatesFilter<"Person"> | number
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    foodItems?: FoodItemListRelationFilter
    supplies?: SupplyListRelationFilter
    foods?: FoodListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    foodItems?: FoodItemOrderByRelationAggregateInput
    supplies?: SupplyOrderByRelationAggregateInput
    foods?: FoodOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    description?: StringNullableFilter<"Category"> | string | null
    foodItems?: FoodItemListRelationFilter
    supplies?: SupplyListRelationFilter
    foods?: FoodListRelationFilter
  }, "id" | "name">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
    description?: StringNullableWithAggregatesFilter<"Category"> | string | null
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: IntFilter<"Location"> | number
    name?: StringFilter<"Location"> | string
    description?: StringNullableFilter<"Location"> | string | null
    foodItems?: FoodItemListRelationFilter
    supplies?: SupplyListRelationFilter
    stocks?: StockListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    foodItems?: FoodItemOrderByRelationAggregateInput
    supplies?: SupplyOrderByRelationAggregateInput
    stocks?: StockOrderByRelationAggregateInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    description?: StringNullableFilter<"Location"> | string | null
    foodItems?: FoodItemListRelationFilter
    supplies?: SupplyListRelationFilter
    stocks?: StockListRelationFilter
  }, "id" | "name">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: LocationCountOrderByAggregateInput
    _avg?: LocationAvgOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
    _sum?: LocationSumOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Location"> | number
    name?: StringWithAggregatesFilter<"Location"> | string
    description?: StringNullableWithAggregatesFilter<"Location"> | string | null
  }

  export type FoodItemWhereInput = {
    AND?: FoodItemWhereInput | FoodItemWhereInput[]
    OR?: FoodItemWhereInput[]
    NOT?: FoodItemWhereInput | FoodItemWhereInput[]
    id?: IntFilter<"FoodItem"> | number
    name?: StringFilter<"FoodItem"> | string
    quantity?: IntFilter<"FoodItem"> | number
    unit?: StringFilter<"FoodItem"> | string
    caloriesPerUnit?: IntFilter<"FoodItem"> | number
    expiryDate?: DateTimeFilter<"FoodItem"> | Date | string
    protein?: FloatNullableFilter<"FoodItem"> | number | null
    carbs?: FloatNullableFilter<"FoodItem"> | number | null
    fat?: FloatNullableFilter<"FoodItem"> | number | null
    servingSize?: FloatNullableFilter<"FoodItem"> | number | null
    servingsPerUnit?: FloatNullableFilter<"FoodItem"> | number | null
    barcode?: StringNullableFilter<"FoodItem"> | string | null
    notes?: StringNullableFilter<"FoodItem"> | string | null
    categoryId?: IntNullableFilter<"FoodItem"> | number | null
    locationId?: IntNullableFilter<"FoodItem"> | number | null
    category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
  }

  export type FoodItemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    caloriesPerUnit?: SortOrder
    expiryDate?: SortOrder
    protein?: SortOrderInput | SortOrder
    carbs?: SortOrderInput | SortOrder
    fat?: SortOrderInput | SortOrder
    servingSize?: SortOrderInput | SortOrder
    servingsPerUnit?: SortOrderInput | SortOrder
    barcode?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    locationId?: SortOrderInput | SortOrder
    category?: CategoryOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
  }

  export type FoodItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FoodItemWhereInput | FoodItemWhereInput[]
    OR?: FoodItemWhereInput[]
    NOT?: FoodItemWhereInput | FoodItemWhereInput[]
    name?: StringFilter<"FoodItem"> | string
    quantity?: IntFilter<"FoodItem"> | number
    unit?: StringFilter<"FoodItem"> | string
    caloriesPerUnit?: IntFilter<"FoodItem"> | number
    expiryDate?: DateTimeFilter<"FoodItem"> | Date | string
    protein?: FloatNullableFilter<"FoodItem"> | number | null
    carbs?: FloatNullableFilter<"FoodItem"> | number | null
    fat?: FloatNullableFilter<"FoodItem"> | number | null
    servingSize?: FloatNullableFilter<"FoodItem"> | number | null
    servingsPerUnit?: FloatNullableFilter<"FoodItem"> | number | null
    barcode?: StringNullableFilter<"FoodItem"> | string | null
    notes?: StringNullableFilter<"FoodItem"> | string | null
    categoryId?: IntNullableFilter<"FoodItem"> | number | null
    locationId?: IntNullableFilter<"FoodItem"> | number | null
    category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
  }, "id">

  export type FoodItemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    caloriesPerUnit?: SortOrder
    expiryDate?: SortOrder
    protein?: SortOrderInput | SortOrder
    carbs?: SortOrderInput | SortOrder
    fat?: SortOrderInput | SortOrder
    servingSize?: SortOrderInput | SortOrder
    servingsPerUnit?: SortOrderInput | SortOrder
    barcode?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    locationId?: SortOrderInput | SortOrder
    _count?: FoodItemCountOrderByAggregateInput
    _avg?: FoodItemAvgOrderByAggregateInput
    _max?: FoodItemMaxOrderByAggregateInput
    _min?: FoodItemMinOrderByAggregateInput
    _sum?: FoodItemSumOrderByAggregateInput
  }

  export type FoodItemScalarWhereWithAggregatesInput = {
    AND?: FoodItemScalarWhereWithAggregatesInput | FoodItemScalarWhereWithAggregatesInput[]
    OR?: FoodItemScalarWhereWithAggregatesInput[]
    NOT?: FoodItemScalarWhereWithAggregatesInput | FoodItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FoodItem"> | number
    name?: StringWithAggregatesFilter<"FoodItem"> | string
    quantity?: IntWithAggregatesFilter<"FoodItem"> | number
    unit?: StringWithAggregatesFilter<"FoodItem"> | string
    caloriesPerUnit?: IntWithAggregatesFilter<"FoodItem"> | number
    expiryDate?: DateTimeWithAggregatesFilter<"FoodItem"> | Date | string
    protein?: FloatNullableWithAggregatesFilter<"FoodItem"> | number | null
    carbs?: FloatNullableWithAggregatesFilter<"FoodItem"> | number | null
    fat?: FloatNullableWithAggregatesFilter<"FoodItem"> | number | null
    servingSize?: FloatNullableWithAggregatesFilter<"FoodItem"> | number | null
    servingsPerUnit?: FloatNullableWithAggregatesFilter<"FoodItem"> | number | null
    barcode?: StringNullableWithAggregatesFilter<"FoodItem"> | string | null
    notes?: StringNullableWithAggregatesFilter<"FoodItem"> | string | null
    categoryId?: IntNullableWithAggregatesFilter<"FoodItem"> | number | null
    locationId?: IntNullableWithAggregatesFilter<"FoodItem"> | number | null
  }

  export type FoodWhereInput = {
    AND?: FoodWhereInput | FoodWhereInput[]
    OR?: FoodWhereInput[]
    NOT?: FoodWhereInput | FoodWhereInput[]
    id?: IntFilter<"Food"> | number
    name?: StringFilter<"Food"> | string
    brand?: StringNullableFilter<"Food"> | string | null
    upc?: StringNullableFilter<"Food"> | string | null
    categoryId?: IntNullableFilter<"Food"> | number | null
    createdAt?: DateTimeFilter<"Food"> | Date | string
    updatedAt?: DateTimeFilter<"Food"> | Date | string
    category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    nutrition?: XOR<NutritionFactNullableRelationFilter, NutritionFactWhereInput> | null
    stocks?: StockListRelationFilter
  }

  export type FoodOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrderInput | SortOrder
    upc?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: CategoryOrderByWithRelationInput
    nutrition?: NutritionFactOrderByWithRelationInput
    stocks?: StockOrderByRelationAggregateInput
  }

  export type FoodWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    upc?: string
    AND?: FoodWhereInput | FoodWhereInput[]
    OR?: FoodWhereInput[]
    NOT?: FoodWhereInput | FoodWhereInput[]
    name?: StringFilter<"Food"> | string
    brand?: StringNullableFilter<"Food"> | string | null
    categoryId?: IntNullableFilter<"Food"> | number | null
    createdAt?: DateTimeFilter<"Food"> | Date | string
    updatedAt?: DateTimeFilter<"Food"> | Date | string
    category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    nutrition?: XOR<NutritionFactNullableRelationFilter, NutritionFactWhereInput> | null
    stocks?: StockListRelationFilter
  }, "id" | "upc">

  export type FoodOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrderInput | SortOrder
    upc?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FoodCountOrderByAggregateInput
    _avg?: FoodAvgOrderByAggregateInput
    _max?: FoodMaxOrderByAggregateInput
    _min?: FoodMinOrderByAggregateInput
    _sum?: FoodSumOrderByAggregateInput
  }

  export type FoodScalarWhereWithAggregatesInput = {
    AND?: FoodScalarWhereWithAggregatesInput | FoodScalarWhereWithAggregatesInput[]
    OR?: FoodScalarWhereWithAggregatesInput[]
    NOT?: FoodScalarWhereWithAggregatesInput | FoodScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Food"> | number
    name?: StringWithAggregatesFilter<"Food"> | string
    brand?: StringNullableWithAggregatesFilter<"Food"> | string | null
    upc?: StringNullableWithAggregatesFilter<"Food"> | string | null
    categoryId?: IntNullableWithAggregatesFilter<"Food"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Food"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Food"> | Date | string
  }

  export type NutritionFactWhereInput = {
    AND?: NutritionFactWhereInput | NutritionFactWhereInput[]
    OR?: NutritionFactWhereInput[]
    NOT?: NutritionFactWhereInput | NutritionFactWhereInput[]
    id?: IntFilter<"NutritionFact"> | number
    foodId?: IntFilter<"NutritionFact"> | number
    calories?: FloatFilter<"NutritionFact"> | number
    protein?: FloatFilter<"NutritionFact"> | number
    carbs?: FloatFilter<"NutritionFact"> | number
    fat?: FloatFilter<"NutritionFact"> | number
    fiber?: FloatNullableFilter<"NutritionFact"> | number | null
    sodium?: FloatNullableFilter<"NutritionFact"> | number | null
    servingSize?: FloatNullableFilter<"NutritionFact"> | number | null
    servingsPerUnit?: FloatNullableFilter<"NutritionFact"> | number | null
    fetchedAt?: DateTimeFilter<"NutritionFact"> | Date | string
    food?: XOR<FoodRelationFilter, FoodWhereInput>
  }

  export type NutritionFactOrderByWithRelationInput = {
    id?: SortOrder
    foodId?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    fiber?: SortOrderInput | SortOrder
    sodium?: SortOrderInput | SortOrder
    servingSize?: SortOrderInput | SortOrder
    servingsPerUnit?: SortOrderInput | SortOrder
    fetchedAt?: SortOrder
    food?: FoodOrderByWithRelationInput
  }

  export type NutritionFactWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    foodId?: number
    AND?: NutritionFactWhereInput | NutritionFactWhereInput[]
    OR?: NutritionFactWhereInput[]
    NOT?: NutritionFactWhereInput | NutritionFactWhereInput[]
    calories?: FloatFilter<"NutritionFact"> | number
    protein?: FloatFilter<"NutritionFact"> | number
    carbs?: FloatFilter<"NutritionFact"> | number
    fat?: FloatFilter<"NutritionFact"> | number
    fiber?: FloatNullableFilter<"NutritionFact"> | number | null
    sodium?: FloatNullableFilter<"NutritionFact"> | number | null
    servingSize?: FloatNullableFilter<"NutritionFact"> | number | null
    servingsPerUnit?: FloatNullableFilter<"NutritionFact"> | number | null
    fetchedAt?: DateTimeFilter<"NutritionFact"> | Date | string
    food?: XOR<FoodRelationFilter, FoodWhereInput>
  }, "id" | "foodId">

  export type NutritionFactOrderByWithAggregationInput = {
    id?: SortOrder
    foodId?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    fiber?: SortOrderInput | SortOrder
    sodium?: SortOrderInput | SortOrder
    servingSize?: SortOrderInput | SortOrder
    servingsPerUnit?: SortOrderInput | SortOrder
    fetchedAt?: SortOrder
    _count?: NutritionFactCountOrderByAggregateInput
    _avg?: NutritionFactAvgOrderByAggregateInput
    _max?: NutritionFactMaxOrderByAggregateInput
    _min?: NutritionFactMinOrderByAggregateInput
    _sum?: NutritionFactSumOrderByAggregateInput
  }

  export type NutritionFactScalarWhereWithAggregatesInput = {
    AND?: NutritionFactScalarWhereWithAggregatesInput | NutritionFactScalarWhereWithAggregatesInput[]
    OR?: NutritionFactScalarWhereWithAggregatesInput[]
    NOT?: NutritionFactScalarWhereWithAggregatesInput | NutritionFactScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"NutritionFact"> | number
    foodId?: IntWithAggregatesFilter<"NutritionFact"> | number
    calories?: FloatWithAggregatesFilter<"NutritionFact"> | number
    protein?: FloatWithAggregatesFilter<"NutritionFact"> | number
    carbs?: FloatWithAggregatesFilter<"NutritionFact"> | number
    fat?: FloatWithAggregatesFilter<"NutritionFact"> | number
    fiber?: FloatNullableWithAggregatesFilter<"NutritionFact"> | number | null
    sodium?: FloatNullableWithAggregatesFilter<"NutritionFact"> | number | null
    servingSize?: FloatNullableWithAggregatesFilter<"NutritionFact"> | number | null
    servingsPerUnit?: FloatNullableWithAggregatesFilter<"NutritionFact"> | number | null
    fetchedAt?: DateTimeWithAggregatesFilter<"NutritionFact"> | Date | string
  }

  export type StockWhereInput = {
    AND?: StockWhereInput | StockWhereInput[]
    OR?: StockWhereInput[]
    NOT?: StockWhereInput | StockWhereInput[]
    id?: IntFilter<"Stock"> | number
    foodId?: IntFilter<"Stock"> | number
    quantity?: IntFilter<"Stock"> | number
    locationId?: IntNullableFilter<"Stock"> | number | null
    expiryDate?: DateTimeNullableFilter<"Stock"> | Date | string | null
    servingsRemaining?: FloatNullableFilter<"Stock"> | number | null
    notes?: StringNullableFilter<"Stock"> | string | null
    createdAt?: DateTimeFilter<"Stock"> | Date | string
    updatedAt?: DateTimeFilter<"Stock"> | Date | string
    food?: XOR<FoodRelationFilter, FoodWhereInput>
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
    consumptionPlans?: ConsumptionPlanListRelationFilter
  }

  export type StockOrderByWithRelationInput = {
    id?: SortOrder
    foodId?: SortOrder
    quantity?: SortOrder
    locationId?: SortOrderInput | SortOrder
    expiryDate?: SortOrderInput | SortOrder
    servingsRemaining?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    food?: FoodOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
    consumptionPlans?: ConsumptionPlanOrderByRelationAggregateInput
  }

  export type StockWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StockWhereInput | StockWhereInput[]
    OR?: StockWhereInput[]
    NOT?: StockWhereInput | StockWhereInput[]
    foodId?: IntFilter<"Stock"> | number
    quantity?: IntFilter<"Stock"> | number
    locationId?: IntNullableFilter<"Stock"> | number | null
    expiryDate?: DateTimeNullableFilter<"Stock"> | Date | string | null
    servingsRemaining?: FloatNullableFilter<"Stock"> | number | null
    notes?: StringNullableFilter<"Stock"> | string | null
    createdAt?: DateTimeFilter<"Stock"> | Date | string
    updatedAt?: DateTimeFilter<"Stock"> | Date | string
    food?: XOR<FoodRelationFilter, FoodWhereInput>
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
    consumptionPlans?: ConsumptionPlanListRelationFilter
  }, "id">

  export type StockOrderByWithAggregationInput = {
    id?: SortOrder
    foodId?: SortOrder
    quantity?: SortOrder
    locationId?: SortOrderInput | SortOrder
    expiryDate?: SortOrderInput | SortOrder
    servingsRemaining?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StockCountOrderByAggregateInput
    _avg?: StockAvgOrderByAggregateInput
    _max?: StockMaxOrderByAggregateInput
    _min?: StockMinOrderByAggregateInput
    _sum?: StockSumOrderByAggregateInput
  }

  export type StockScalarWhereWithAggregatesInput = {
    AND?: StockScalarWhereWithAggregatesInput | StockScalarWhereWithAggregatesInput[]
    OR?: StockScalarWhereWithAggregatesInput[]
    NOT?: StockScalarWhereWithAggregatesInput | StockScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Stock"> | number
    foodId?: IntWithAggregatesFilter<"Stock"> | number
    quantity?: IntWithAggregatesFilter<"Stock"> | number
    locationId?: IntNullableWithAggregatesFilter<"Stock"> | number | null
    expiryDate?: DateTimeNullableWithAggregatesFilter<"Stock"> | Date | string | null
    servingsRemaining?: FloatNullableWithAggregatesFilter<"Stock"> | number | null
    notes?: StringNullableWithAggregatesFilter<"Stock"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Stock"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Stock"> | Date | string
  }

  export type ConsumptionPlanWhereInput = {
    AND?: ConsumptionPlanWhereInput | ConsumptionPlanWhereInput[]
    OR?: ConsumptionPlanWhereInput[]
    NOT?: ConsumptionPlanWhereInput | ConsumptionPlanWhereInput[]
    id?: IntFilter<"ConsumptionPlan"> | number
    personId?: IntFilter<"ConsumptionPlan"> | number
    stockId?: IntFilter<"ConsumptionPlan"> | number
    servingsPerDay?: FloatFilter<"ConsumptionPlan"> | number
    startDate?: DateTimeFilter<"ConsumptionPlan"> | Date | string
    endDate?: DateTimeNullableFilter<"ConsumptionPlan"> | Date | string | null
    person?: XOR<PersonRelationFilter, PersonWhereInput>
    stock?: XOR<StockRelationFilter, StockWhereInput>
  }

  export type ConsumptionPlanOrderByWithRelationInput = {
    id?: SortOrder
    personId?: SortOrder
    stockId?: SortOrder
    servingsPerDay?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    person?: PersonOrderByWithRelationInput
    stock?: StockOrderByWithRelationInput
  }

  export type ConsumptionPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ConsumptionPlanWhereInput | ConsumptionPlanWhereInput[]
    OR?: ConsumptionPlanWhereInput[]
    NOT?: ConsumptionPlanWhereInput | ConsumptionPlanWhereInput[]
    personId?: IntFilter<"ConsumptionPlan"> | number
    stockId?: IntFilter<"ConsumptionPlan"> | number
    servingsPerDay?: FloatFilter<"ConsumptionPlan"> | number
    startDate?: DateTimeFilter<"ConsumptionPlan"> | Date | string
    endDate?: DateTimeNullableFilter<"ConsumptionPlan"> | Date | string | null
    person?: XOR<PersonRelationFilter, PersonWhereInput>
    stock?: XOR<StockRelationFilter, StockWhereInput>
  }, "id">

  export type ConsumptionPlanOrderByWithAggregationInput = {
    id?: SortOrder
    personId?: SortOrder
    stockId?: SortOrder
    servingsPerDay?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    _count?: ConsumptionPlanCountOrderByAggregateInput
    _avg?: ConsumptionPlanAvgOrderByAggregateInput
    _max?: ConsumptionPlanMaxOrderByAggregateInput
    _min?: ConsumptionPlanMinOrderByAggregateInput
    _sum?: ConsumptionPlanSumOrderByAggregateInput
  }

  export type ConsumptionPlanScalarWhereWithAggregatesInput = {
    AND?: ConsumptionPlanScalarWhereWithAggregatesInput | ConsumptionPlanScalarWhereWithAggregatesInput[]
    OR?: ConsumptionPlanScalarWhereWithAggregatesInput[]
    NOT?: ConsumptionPlanScalarWhereWithAggregatesInput | ConsumptionPlanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ConsumptionPlan"> | number
    personId?: IntWithAggregatesFilter<"ConsumptionPlan"> | number
    stockId?: IntWithAggregatesFilter<"ConsumptionPlan"> | number
    servingsPerDay?: FloatWithAggregatesFilter<"ConsumptionPlan"> | number
    startDate?: DateTimeWithAggregatesFilter<"ConsumptionPlan"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"ConsumptionPlan"> | Date | string | null
  }

  export type SupplyWhereInput = {
    AND?: SupplyWhereInput | SupplyWhereInput[]
    OR?: SupplyWhereInput[]
    NOT?: SupplyWhereInput | SupplyWhereInput[]
    id?: IntFilter<"Supply"> | number
    name?: StringFilter<"Supply"> | string
    quantity?: IntFilter<"Supply"> | number
    unit?: StringNullableFilter<"Supply"> | string | null
    expiryDate?: DateTimeNullableFilter<"Supply"> | Date | string | null
    notes?: StringNullableFilter<"Supply"> | string | null
    categoryId?: IntNullableFilter<"Supply"> | number | null
    locationId?: IntNullableFilter<"Supply"> | number | null
    category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
  }

  export type SupplyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    unit?: SortOrderInput | SortOrder
    expiryDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    locationId?: SortOrderInput | SortOrder
    category?: CategoryOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
  }

  export type SupplyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SupplyWhereInput | SupplyWhereInput[]
    OR?: SupplyWhereInput[]
    NOT?: SupplyWhereInput | SupplyWhereInput[]
    name?: StringFilter<"Supply"> | string
    quantity?: IntFilter<"Supply"> | number
    unit?: StringNullableFilter<"Supply"> | string | null
    expiryDate?: DateTimeNullableFilter<"Supply"> | Date | string | null
    notes?: StringNullableFilter<"Supply"> | string | null
    categoryId?: IntNullableFilter<"Supply"> | number | null
    locationId?: IntNullableFilter<"Supply"> | number | null
    category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
  }, "id">

  export type SupplyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    unit?: SortOrderInput | SortOrder
    expiryDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    locationId?: SortOrderInput | SortOrder
    _count?: SupplyCountOrderByAggregateInput
    _avg?: SupplyAvgOrderByAggregateInput
    _max?: SupplyMaxOrderByAggregateInput
    _min?: SupplyMinOrderByAggregateInput
    _sum?: SupplySumOrderByAggregateInput
  }

  export type SupplyScalarWhereWithAggregatesInput = {
    AND?: SupplyScalarWhereWithAggregatesInput | SupplyScalarWhereWithAggregatesInput[]
    OR?: SupplyScalarWhereWithAggregatesInput[]
    NOT?: SupplyScalarWhereWithAggregatesInput | SupplyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Supply"> | number
    name?: StringWithAggregatesFilter<"Supply"> | string
    quantity?: IntWithAggregatesFilter<"Supply"> | number
    unit?: StringNullableWithAggregatesFilter<"Supply"> | string | null
    expiryDate?: DateTimeNullableWithAggregatesFilter<"Supply"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"Supply"> | string | null
    categoryId?: IntNullableWithAggregatesFilter<"Supply"> | number | null
    locationId?: IntNullableWithAggregatesFilter<"Supply"> | number | null
  }

  export type PersonCreateInput = {
    name: string
    age: number
    dietaryRestrictions?: string | null
    dailyConsumption: number
    consumptionPlans?: ConsumptionPlanCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateInput = {
    id?: number
    name: string
    age: number
    dietaryRestrictions?: string | null
    dailyConsumption: number
    consumptionPlans?: ConsumptionPlanUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    dietaryRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    dailyConsumption?: IntFieldUpdateOperationsInput | number
    consumptionPlans?: ConsumptionPlanUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    dietaryRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    dailyConsumption?: IntFieldUpdateOperationsInput | number
    consumptionPlans?: ConsumptionPlanUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type PersonCreateManyInput = {
    id?: number
    name: string
    age: number
    dietaryRestrictions?: string | null
    dailyConsumption: number
  }

  export type PersonUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    dietaryRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    dailyConsumption?: IntFieldUpdateOperationsInput | number
  }

  export type PersonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    dietaryRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    dailyConsumption?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryCreateInput = {
    name: string
    description?: string | null
    foodItems?: FoodItemCreateNestedManyWithoutCategoryInput
    supplies?: SupplyCreateNestedManyWithoutCategoryInput
    foods?: FoodCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    foodItems?: FoodItemUncheckedCreateNestedManyWithoutCategoryInput
    supplies?: SupplyUncheckedCreateNestedManyWithoutCategoryInput
    foods?: FoodUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    foodItems?: FoodItemUpdateManyWithoutCategoryNestedInput
    supplies?: SupplyUpdateManyWithoutCategoryNestedInput
    foods?: FoodUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    foodItems?: FoodItemUncheckedUpdateManyWithoutCategoryNestedInput
    supplies?: SupplyUncheckedUpdateManyWithoutCategoryNestedInput
    foods?: FoodUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
    description?: string | null
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LocationCreateInput = {
    name: string
    description?: string | null
    foodItems?: FoodItemCreateNestedManyWithoutLocationInput
    supplies?: SupplyCreateNestedManyWithoutLocationInput
    stocks?: StockCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    foodItems?: FoodItemUncheckedCreateNestedManyWithoutLocationInput
    supplies?: SupplyUncheckedCreateNestedManyWithoutLocationInput
    stocks?: StockUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    foodItems?: FoodItemUpdateManyWithoutLocationNestedInput
    supplies?: SupplyUpdateManyWithoutLocationNestedInput
    stocks?: StockUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    foodItems?: FoodItemUncheckedUpdateManyWithoutLocationNestedInput
    supplies?: SupplyUncheckedUpdateManyWithoutLocationNestedInput
    stocks?: StockUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id?: number
    name: string
    description?: string | null
  }

  export type LocationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FoodItemCreateInput = {
    name: string
    quantity: number
    unit: string
    caloriesPerUnit: number
    expiryDate: Date | string
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: number | null
    servingsPerUnit?: number | null
    barcode?: string | null
    notes?: string | null
    category?: CategoryCreateNestedOneWithoutFoodItemsInput
    location?: LocationCreateNestedOneWithoutFoodItemsInput
  }

  export type FoodItemUncheckedCreateInput = {
    id?: number
    name: string
    quantity: number
    unit: string
    caloriesPerUnit: number
    expiryDate: Date | string
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: number | null
    servingsPerUnit?: number | null
    barcode?: string | null
    notes?: string | null
    categoryId?: number | null
    locationId?: number | null
  }

  export type FoodItemUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    caloriesPerUnit?: IntFieldUpdateOperationsInput | number
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    servingsPerUnit?: NullableFloatFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: CategoryUpdateOneWithoutFoodItemsNestedInput
    location?: LocationUpdateOneWithoutFoodItemsNestedInput
  }

  export type FoodItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    caloriesPerUnit?: IntFieldUpdateOperationsInput | number
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    servingsPerUnit?: NullableFloatFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FoodItemCreateManyInput = {
    id?: number
    name: string
    quantity: number
    unit: string
    caloriesPerUnit: number
    expiryDate: Date | string
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: number | null
    servingsPerUnit?: number | null
    barcode?: string | null
    notes?: string | null
    categoryId?: number | null
    locationId?: number | null
  }

  export type FoodItemUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    caloriesPerUnit?: IntFieldUpdateOperationsInput | number
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    servingsPerUnit?: NullableFloatFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FoodItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    caloriesPerUnit?: IntFieldUpdateOperationsInput | number
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    servingsPerUnit?: NullableFloatFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FoodCreateInput = {
    name: string
    brand?: string | null
    upc?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: CategoryCreateNestedOneWithoutFoodsInput
    nutrition?: NutritionFactCreateNestedOneWithoutFoodInput
    stocks?: StockCreateNestedManyWithoutFoodInput
  }

  export type FoodUncheckedCreateInput = {
    id?: number
    name: string
    brand?: string | null
    upc?: string | null
    categoryId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nutrition?: NutritionFactUncheckedCreateNestedOneWithoutFoodInput
    stocks?: StockUncheckedCreateNestedManyWithoutFoodInput
  }

  export type FoodUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutFoodsNestedInput
    nutrition?: NutritionFactUpdateOneWithoutFoodNestedInput
    stocks?: StockUpdateManyWithoutFoodNestedInput
  }

  export type FoodUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutrition?: NutritionFactUncheckedUpdateOneWithoutFoodNestedInput
    stocks?: StockUncheckedUpdateManyWithoutFoodNestedInput
  }

  export type FoodCreateManyInput = {
    id?: number
    name: string
    brand?: string | null
    upc?: string | null
    categoryId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NutritionFactCreateInput = {
    calories: number
    protein: number
    carbs: number
    fat: number
    fiber?: number | null
    sodium?: number | null
    servingSize?: number | null
    servingsPerUnit?: number | null
    fetchedAt?: Date | string
    food: FoodCreateNestedOneWithoutNutritionInput
  }

  export type NutritionFactUncheckedCreateInput = {
    id?: number
    foodId: number
    calories: number
    protein: number
    carbs: number
    fat: number
    fiber?: number | null
    sodium?: number | null
    servingSize?: number | null
    servingsPerUnit?: number | null
    fetchedAt?: Date | string
  }

  export type NutritionFactUpdateInput = {
    calories?: FloatFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    sodium?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    servingsPerUnit?: NullableFloatFieldUpdateOperationsInput | number | null
    fetchedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    food?: FoodUpdateOneRequiredWithoutNutritionNestedInput
  }

  export type NutritionFactUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    foodId?: IntFieldUpdateOperationsInput | number
    calories?: FloatFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    sodium?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    servingsPerUnit?: NullableFloatFieldUpdateOperationsInput | number | null
    fetchedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NutritionFactCreateManyInput = {
    id?: number
    foodId: number
    calories: number
    protein: number
    carbs: number
    fat: number
    fiber?: number | null
    sodium?: number | null
    servingSize?: number | null
    servingsPerUnit?: number | null
    fetchedAt?: Date | string
  }

  export type NutritionFactUpdateManyMutationInput = {
    calories?: FloatFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    sodium?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    servingsPerUnit?: NullableFloatFieldUpdateOperationsInput | number | null
    fetchedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NutritionFactUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    foodId?: IntFieldUpdateOperationsInput | number
    calories?: FloatFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    sodium?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    servingsPerUnit?: NullableFloatFieldUpdateOperationsInput | number | null
    fetchedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockCreateInput = {
    quantity: number
    expiryDate?: Date | string | null
    servingsRemaining?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    food: FoodCreateNestedOneWithoutStocksInput
    location?: LocationCreateNestedOneWithoutStocksInput
    consumptionPlans?: ConsumptionPlanCreateNestedManyWithoutStockInput
  }

  export type StockUncheckedCreateInput = {
    id?: number
    foodId: number
    quantity: number
    locationId?: number | null
    expiryDate?: Date | string | null
    servingsRemaining?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consumptionPlans?: ConsumptionPlanUncheckedCreateNestedManyWithoutStockInput
  }

  export type StockUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    servingsRemaining?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    food?: FoodUpdateOneRequiredWithoutStocksNestedInput
    location?: LocationUpdateOneWithoutStocksNestedInput
    consumptionPlans?: ConsumptionPlanUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    foodId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    servingsRemaining?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumptionPlans?: ConsumptionPlanUncheckedUpdateManyWithoutStockNestedInput
  }

  export type StockCreateManyInput = {
    id?: number
    foodId: number
    quantity: number
    locationId?: number | null
    expiryDate?: Date | string | null
    servingsRemaining?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StockUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    servingsRemaining?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    foodId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    servingsRemaining?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsumptionPlanCreateInput = {
    servingsPerDay: number
    startDate?: Date | string
    endDate?: Date | string | null
    person: PersonCreateNestedOneWithoutConsumptionPlansInput
    stock: StockCreateNestedOneWithoutConsumptionPlansInput
  }

  export type ConsumptionPlanUncheckedCreateInput = {
    id?: number
    personId: number
    stockId: number
    servingsPerDay: number
    startDate?: Date | string
    endDate?: Date | string | null
  }

  export type ConsumptionPlanUpdateInput = {
    servingsPerDay?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    person?: PersonUpdateOneRequiredWithoutConsumptionPlansNestedInput
    stock?: StockUpdateOneRequiredWithoutConsumptionPlansNestedInput
  }

  export type ConsumptionPlanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    personId?: IntFieldUpdateOperationsInput | number
    stockId?: IntFieldUpdateOperationsInput | number
    servingsPerDay?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ConsumptionPlanCreateManyInput = {
    id?: number
    personId: number
    stockId: number
    servingsPerDay: number
    startDate?: Date | string
    endDate?: Date | string | null
  }

  export type ConsumptionPlanUpdateManyMutationInput = {
    servingsPerDay?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ConsumptionPlanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    personId?: IntFieldUpdateOperationsInput | number
    stockId?: IntFieldUpdateOperationsInput | number
    servingsPerDay?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SupplyCreateInput = {
    name: string
    quantity: number
    unit?: string | null
    expiryDate?: Date | string | null
    notes?: string | null
    category?: CategoryCreateNestedOneWithoutSuppliesInput
    location?: LocationCreateNestedOneWithoutSuppliesInput
  }

  export type SupplyUncheckedCreateInput = {
    id?: number
    name: string
    quantity: number
    unit?: string | null
    expiryDate?: Date | string | null
    notes?: string | null
    categoryId?: number | null
    locationId?: number | null
  }

  export type SupplyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: CategoryUpdateOneWithoutSuppliesNestedInput
    location?: LocationUpdateOneWithoutSuppliesNestedInput
  }

  export type SupplyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SupplyCreateManyInput = {
    id?: number
    name: string
    quantity: number
    unit?: string | null
    expiryDate?: Date | string | null
    notes?: string | null
    categoryId?: number | null
    locationId?: number | null
  }

  export type SupplyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SupplyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ConsumptionPlanListRelationFilter = {
    every?: ConsumptionPlanWhereInput
    some?: ConsumptionPlanWhereInput
    none?: ConsumptionPlanWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ConsumptionPlanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PersonCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    dietaryRestrictions?: SortOrder
    dailyConsumption?: SortOrder
  }

  export type PersonAvgOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    dailyConsumption?: SortOrder
  }

  export type PersonMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    dietaryRestrictions?: SortOrder
    dailyConsumption?: SortOrder
  }

  export type PersonMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    dietaryRestrictions?: SortOrder
    dailyConsumption?: SortOrder
  }

  export type PersonSumOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    dailyConsumption?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FoodItemListRelationFilter = {
    every?: FoodItemWhereInput
    some?: FoodItemWhereInput
    none?: FoodItemWhereInput
  }

  export type SupplyListRelationFilter = {
    every?: SupplyWhereInput
    some?: SupplyWhereInput
    none?: SupplyWhereInput
  }

  export type FoodListRelationFilter = {
    every?: FoodWhereInput
    some?: FoodWhereInput
    none?: FoodWhereInput
  }

  export type FoodItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SupplyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FoodOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StockListRelationFilter = {
    every?: StockWhereInput
    some?: StockWhereInput
    none?: StockWhereInput
  }

  export type StockOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type LocationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type LocationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CategoryNullableRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type LocationNullableRelationFilter = {
    is?: LocationWhereInput | null
    isNot?: LocationWhereInput | null
  }

  export type FoodItemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    caloriesPerUnit?: SortOrder
    expiryDate?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    servingSize?: SortOrder
    servingsPerUnit?: SortOrder
    barcode?: SortOrder
    notes?: SortOrder
    categoryId?: SortOrder
    locationId?: SortOrder
  }

  export type FoodItemAvgOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    caloriesPerUnit?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    servingSize?: SortOrder
    servingsPerUnit?: SortOrder
    categoryId?: SortOrder
    locationId?: SortOrder
  }

  export type FoodItemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    caloriesPerUnit?: SortOrder
    expiryDate?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    servingSize?: SortOrder
    servingsPerUnit?: SortOrder
    barcode?: SortOrder
    notes?: SortOrder
    categoryId?: SortOrder
    locationId?: SortOrder
  }

  export type FoodItemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    caloriesPerUnit?: SortOrder
    expiryDate?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    servingSize?: SortOrder
    servingsPerUnit?: SortOrder
    barcode?: SortOrder
    notes?: SortOrder
    categoryId?: SortOrder
    locationId?: SortOrder
  }

  export type FoodItemSumOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    caloriesPerUnit?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    servingSize?: SortOrder
    servingsPerUnit?: SortOrder
    categoryId?: SortOrder
    locationId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NutritionFactNullableRelationFilter = {
    is?: NutritionFactWhereInput | null
    isNot?: NutritionFactWhereInput | null
  }

  export type FoodCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    upc?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type FoodMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    upc?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    upc?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FoodRelationFilter = {
    is?: FoodWhereInput
    isNot?: FoodWhereInput
  }

  export type NutritionFactCountOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    fiber?: SortOrder
    sodium?: SortOrder
    servingSize?: SortOrder
    servingsPerUnit?: SortOrder
    fetchedAt?: SortOrder
  }

  export type NutritionFactAvgOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    fiber?: SortOrder
    sodium?: SortOrder
    servingSize?: SortOrder
    servingsPerUnit?: SortOrder
  }

  export type NutritionFactMaxOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    fiber?: SortOrder
    sodium?: SortOrder
    servingSize?: SortOrder
    servingsPerUnit?: SortOrder
    fetchedAt?: SortOrder
  }

  export type NutritionFactMinOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    fiber?: SortOrder
    sodium?: SortOrder
    servingSize?: SortOrder
    servingsPerUnit?: SortOrder
    fetchedAt?: SortOrder
  }

  export type NutritionFactSumOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    fiber?: SortOrder
    sodium?: SortOrder
    servingSize?: SortOrder
    servingsPerUnit?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StockCountOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    quantity?: SortOrder
    locationId?: SortOrder
    expiryDate?: SortOrder
    servingsRemaining?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StockAvgOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    quantity?: SortOrder
    locationId?: SortOrder
    servingsRemaining?: SortOrder
  }

  export type StockMaxOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    quantity?: SortOrder
    locationId?: SortOrder
    expiryDate?: SortOrder
    servingsRemaining?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StockMinOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    quantity?: SortOrder
    locationId?: SortOrder
    expiryDate?: SortOrder
    servingsRemaining?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StockSumOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    quantity?: SortOrder
    locationId?: SortOrder
    servingsRemaining?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type PersonRelationFilter = {
    is?: PersonWhereInput
    isNot?: PersonWhereInput
  }

  export type StockRelationFilter = {
    is?: StockWhereInput
    isNot?: StockWhereInput
  }

  export type ConsumptionPlanCountOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    stockId?: SortOrder
    servingsPerDay?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type ConsumptionPlanAvgOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    stockId?: SortOrder
    servingsPerDay?: SortOrder
  }

  export type ConsumptionPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    stockId?: SortOrder
    servingsPerDay?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type ConsumptionPlanMinOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    stockId?: SortOrder
    servingsPerDay?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type ConsumptionPlanSumOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    stockId?: SortOrder
    servingsPerDay?: SortOrder
  }

  export type SupplyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    expiryDate?: SortOrder
    notes?: SortOrder
    categoryId?: SortOrder
    locationId?: SortOrder
  }

  export type SupplyAvgOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    categoryId?: SortOrder
    locationId?: SortOrder
  }

  export type SupplyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    expiryDate?: SortOrder
    notes?: SortOrder
    categoryId?: SortOrder
    locationId?: SortOrder
  }

  export type SupplyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    expiryDate?: SortOrder
    notes?: SortOrder
    categoryId?: SortOrder
    locationId?: SortOrder
  }

  export type SupplySumOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    categoryId?: SortOrder
    locationId?: SortOrder
  }

  export type ConsumptionPlanCreateNestedManyWithoutPersonInput = {
    create?: XOR<ConsumptionPlanCreateWithoutPersonInput, ConsumptionPlanUncheckedCreateWithoutPersonInput> | ConsumptionPlanCreateWithoutPersonInput[] | ConsumptionPlanUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: ConsumptionPlanCreateOrConnectWithoutPersonInput | ConsumptionPlanCreateOrConnectWithoutPersonInput[]
    createMany?: ConsumptionPlanCreateManyPersonInputEnvelope
    connect?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
  }

  export type ConsumptionPlanUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<ConsumptionPlanCreateWithoutPersonInput, ConsumptionPlanUncheckedCreateWithoutPersonInput> | ConsumptionPlanCreateWithoutPersonInput[] | ConsumptionPlanUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: ConsumptionPlanCreateOrConnectWithoutPersonInput | ConsumptionPlanCreateOrConnectWithoutPersonInput[]
    createMany?: ConsumptionPlanCreateManyPersonInputEnvelope
    connect?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ConsumptionPlanUpdateManyWithoutPersonNestedInput = {
    create?: XOR<ConsumptionPlanCreateWithoutPersonInput, ConsumptionPlanUncheckedCreateWithoutPersonInput> | ConsumptionPlanCreateWithoutPersonInput[] | ConsumptionPlanUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: ConsumptionPlanCreateOrConnectWithoutPersonInput | ConsumptionPlanCreateOrConnectWithoutPersonInput[]
    upsert?: ConsumptionPlanUpsertWithWhereUniqueWithoutPersonInput | ConsumptionPlanUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: ConsumptionPlanCreateManyPersonInputEnvelope
    set?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
    disconnect?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
    delete?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
    connect?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
    update?: ConsumptionPlanUpdateWithWhereUniqueWithoutPersonInput | ConsumptionPlanUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: ConsumptionPlanUpdateManyWithWhereWithoutPersonInput | ConsumptionPlanUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: ConsumptionPlanScalarWhereInput | ConsumptionPlanScalarWhereInput[]
  }

  export type ConsumptionPlanUncheckedUpdateManyWithoutPersonNestedInput = {
    create?: XOR<ConsumptionPlanCreateWithoutPersonInput, ConsumptionPlanUncheckedCreateWithoutPersonInput> | ConsumptionPlanCreateWithoutPersonInput[] | ConsumptionPlanUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: ConsumptionPlanCreateOrConnectWithoutPersonInput | ConsumptionPlanCreateOrConnectWithoutPersonInput[]
    upsert?: ConsumptionPlanUpsertWithWhereUniqueWithoutPersonInput | ConsumptionPlanUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: ConsumptionPlanCreateManyPersonInputEnvelope
    set?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
    disconnect?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
    delete?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
    connect?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
    update?: ConsumptionPlanUpdateWithWhereUniqueWithoutPersonInput | ConsumptionPlanUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: ConsumptionPlanUpdateManyWithWhereWithoutPersonInput | ConsumptionPlanUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: ConsumptionPlanScalarWhereInput | ConsumptionPlanScalarWhereInput[]
  }

  export type FoodItemCreateNestedManyWithoutCategoryInput = {
    create?: XOR<FoodItemCreateWithoutCategoryInput, FoodItemUncheckedCreateWithoutCategoryInput> | FoodItemCreateWithoutCategoryInput[] | FoodItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutCategoryInput | FoodItemCreateOrConnectWithoutCategoryInput[]
    createMany?: FoodItemCreateManyCategoryInputEnvelope
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
  }

  export type SupplyCreateNestedManyWithoutCategoryInput = {
    create?: XOR<SupplyCreateWithoutCategoryInput, SupplyUncheckedCreateWithoutCategoryInput> | SupplyCreateWithoutCategoryInput[] | SupplyUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SupplyCreateOrConnectWithoutCategoryInput | SupplyCreateOrConnectWithoutCategoryInput[]
    createMany?: SupplyCreateManyCategoryInputEnvelope
    connect?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
  }

  export type FoodCreateNestedManyWithoutCategoryInput = {
    create?: XOR<FoodCreateWithoutCategoryInput, FoodUncheckedCreateWithoutCategoryInput> | FoodCreateWithoutCategoryInput[] | FoodUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FoodCreateOrConnectWithoutCategoryInput | FoodCreateOrConnectWithoutCategoryInput[]
    createMany?: FoodCreateManyCategoryInputEnvelope
    connect?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
  }

  export type FoodItemUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<FoodItemCreateWithoutCategoryInput, FoodItemUncheckedCreateWithoutCategoryInput> | FoodItemCreateWithoutCategoryInput[] | FoodItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutCategoryInput | FoodItemCreateOrConnectWithoutCategoryInput[]
    createMany?: FoodItemCreateManyCategoryInputEnvelope
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
  }

  export type SupplyUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<SupplyCreateWithoutCategoryInput, SupplyUncheckedCreateWithoutCategoryInput> | SupplyCreateWithoutCategoryInput[] | SupplyUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SupplyCreateOrConnectWithoutCategoryInput | SupplyCreateOrConnectWithoutCategoryInput[]
    createMany?: SupplyCreateManyCategoryInputEnvelope
    connect?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
  }

  export type FoodUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<FoodCreateWithoutCategoryInput, FoodUncheckedCreateWithoutCategoryInput> | FoodCreateWithoutCategoryInput[] | FoodUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FoodCreateOrConnectWithoutCategoryInput | FoodCreateOrConnectWithoutCategoryInput[]
    createMany?: FoodCreateManyCategoryInputEnvelope
    connect?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
  }

  export type FoodItemUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<FoodItemCreateWithoutCategoryInput, FoodItemUncheckedCreateWithoutCategoryInput> | FoodItemCreateWithoutCategoryInput[] | FoodItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutCategoryInput | FoodItemCreateOrConnectWithoutCategoryInput[]
    upsert?: FoodItemUpsertWithWhereUniqueWithoutCategoryInput | FoodItemUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: FoodItemCreateManyCategoryInputEnvelope
    set?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    disconnect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    delete?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    update?: FoodItemUpdateWithWhereUniqueWithoutCategoryInput | FoodItemUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: FoodItemUpdateManyWithWhereWithoutCategoryInput | FoodItemUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: FoodItemScalarWhereInput | FoodItemScalarWhereInput[]
  }

  export type SupplyUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<SupplyCreateWithoutCategoryInput, SupplyUncheckedCreateWithoutCategoryInput> | SupplyCreateWithoutCategoryInput[] | SupplyUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SupplyCreateOrConnectWithoutCategoryInput | SupplyCreateOrConnectWithoutCategoryInput[]
    upsert?: SupplyUpsertWithWhereUniqueWithoutCategoryInput | SupplyUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: SupplyCreateManyCategoryInputEnvelope
    set?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
    disconnect?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
    delete?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
    connect?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
    update?: SupplyUpdateWithWhereUniqueWithoutCategoryInput | SupplyUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: SupplyUpdateManyWithWhereWithoutCategoryInput | SupplyUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: SupplyScalarWhereInput | SupplyScalarWhereInput[]
  }

  export type FoodUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<FoodCreateWithoutCategoryInput, FoodUncheckedCreateWithoutCategoryInput> | FoodCreateWithoutCategoryInput[] | FoodUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FoodCreateOrConnectWithoutCategoryInput | FoodCreateOrConnectWithoutCategoryInput[]
    upsert?: FoodUpsertWithWhereUniqueWithoutCategoryInput | FoodUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: FoodCreateManyCategoryInputEnvelope
    set?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
    disconnect?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
    delete?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
    connect?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
    update?: FoodUpdateWithWhereUniqueWithoutCategoryInput | FoodUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: FoodUpdateManyWithWhereWithoutCategoryInput | FoodUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: FoodScalarWhereInput | FoodScalarWhereInput[]
  }

  export type FoodItemUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<FoodItemCreateWithoutCategoryInput, FoodItemUncheckedCreateWithoutCategoryInput> | FoodItemCreateWithoutCategoryInput[] | FoodItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutCategoryInput | FoodItemCreateOrConnectWithoutCategoryInput[]
    upsert?: FoodItemUpsertWithWhereUniqueWithoutCategoryInput | FoodItemUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: FoodItemCreateManyCategoryInputEnvelope
    set?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    disconnect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    delete?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    update?: FoodItemUpdateWithWhereUniqueWithoutCategoryInput | FoodItemUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: FoodItemUpdateManyWithWhereWithoutCategoryInput | FoodItemUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: FoodItemScalarWhereInput | FoodItemScalarWhereInput[]
  }

  export type SupplyUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<SupplyCreateWithoutCategoryInput, SupplyUncheckedCreateWithoutCategoryInput> | SupplyCreateWithoutCategoryInput[] | SupplyUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SupplyCreateOrConnectWithoutCategoryInput | SupplyCreateOrConnectWithoutCategoryInput[]
    upsert?: SupplyUpsertWithWhereUniqueWithoutCategoryInput | SupplyUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: SupplyCreateManyCategoryInputEnvelope
    set?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
    disconnect?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
    delete?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
    connect?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
    update?: SupplyUpdateWithWhereUniqueWithoutCategoryInput | SupplyUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: SupplyUpdateManyWithWhereWithoutCategoryInput | SupplyUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: SupplyScalarWhereInput | SupplyScalarWhereInput[]
  }

  export type FoodUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<FoodCreateWithoutCategoryInput, FoodUncheckedCreateWithoutCategoryInput> | FoodCreateWithoutCategoryInput[] | FoodUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FoodCreateOrConnectWithoutCategoryInput | FoodCreateOrConnectWithoutCategoryInput[]
    upsert?: FoodUpsertWithWhereUniqueWithoutCategoryInput | FoodUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: FoodCreateManyCategoryInputEnvelope
    set?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
    disconnect?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
    delete?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
    connect?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
    update?: FoodUpdateWithWhereUniqueWithoutCategoryInput | FoodUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: FoodUpdateManyWithWhereWithoutCategoryInput | FoodUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: FoodScalarWhereInput | FoodScalarWhereInput[]
  }

  export type FoodItemCreateNestedManyWithoutLocationInput = {
    create?: XOR<FoodItemCreateWithoutLocationInput, FoodItemUncheckedCreateWithoutLocationInput> | FoodItemCreateWithoutLocationInput[] | FoodItemUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutLocationInput | FoodItemCreateOrConnectWithoutLocationInput[]
    createMany?: FoodItemCreateManyLocationInputEnvelope
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
  }

  export type SupplyCreateNestedManyWithoutLocationInput = {
    create?: XOR<SupplyCreateWithoutLocationInput, SupplyUncheckedCreateWithoutLocationInput> | SupplyCreateWithoutLocationInput[] | SupplyUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: SupplyCreateOrConnectWithoutLocationInput | SupplyCreateOrConnectWithoutLocationInput[]
    createMany?: SupplyCreateManyLocationInputEnvelope
    connect?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
  }

  export type StockCreateNestedManyWithoutLocationInput = {
    create?: XOR<StockCreateWithoutLocationInput, StockUncheckedCreateWithoutLocationInput> | StockCreateWithoutLocationInput[] | StockUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: StockCreateOrConnectWithoutLocationInput | StockCreateOrConnectWithoutLocationInput[]
    createMany?: StockCreateManyLocationInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type FoodItemUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<FoodItemCreateWithoutLocationInput, FoodItemUncheckedCreateWithoutLocationInput> | FoodItemCreateWithoutLocationInput[] | FoodItemUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutLocationInput | FoodItemCreateOrConnectWithoutLocationInput[]
    createMany?: FoodItemCreateManyLocationInputEnvelope
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
  }

  export type SupplyUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<SupplyCreateWithoutLocationInput, SupplyUncheckedCreateWithoutLocationInput> | SupplyCreateWithoutLocationInput[] | SupplyUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: SupplyCreateOrConnectWithoutLocationInput | SupplyCreateOrConnectWithoutLocationInput[]
    createMany?: SupplyCreateManyLocationInputEnvelope
    connect?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
  }

  export type StockUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<StockCreateWithoutLocationInput, StockUncheckedCreateWithoutLocationInput> | StockCreateWithoutLocationInput[] | StockUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: StockCreateOrConnectWithoutLocationInput | StockCreateOrConnectWithoutLocationInput[]
    createMany?: StockCreateManyLocationInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type FoodItemUpdateManyWithoutLocationNestedInput = {
    create?: XOR<FoodItemCreateWithoutLocationInput, FoodItemUncheckedCreateWithoutLocationInput> | FoodItemCreateWithoutLocationInput[] | FoodItemUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutLocationInput | FoodItemCreateOrConnectWithoutLocationInput[]
    upsert?: FoodItemUpsertWithWhereUniqueWithoutLocationInput | FoodItemUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: FoodItemCreateManyLocationInputEnvelope
    set?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    disconnect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    delete?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    update?: FoodItemUpdateWithWhereUniqueWithoutLocationInput | FoodItemUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: FoodItemUpdateManyWithWhereWithoutLocationInput | FoodItemUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: FoodItemScalarWhereInput | FoodItemScalarWhereInput[]
  }

  export type SupplyUpdateManyWithoutLocationNestedInput = {
    create?: XOR<SupplyCreateWithoutLocationInput, SupplyUncheckedCreateWithoutLocationInput> | SupplyCreateWithoutLocationInput[] | SupplyUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: SupplyCreateOrConnectWithoutLocationInput | SupplyCreateOrConnectWithoutLocationInput[]
    upsert?: SupplyUpsertWithWhereUniqueWithoutLocationInput | SupplyUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: SupplyCreateManyLocationInputEnvelope
    set?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
    disconnect?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
    delete?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
    connect?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
    update?: SupplyUpdateWithWhereUniqueWithoutLocationInput | SupplyUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: SupplyUpdateManyWithWhereWithoutLocationInput | SupplyUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: SupplyScalarWhereInput | SupplyScalarWhereInput[]
  }

  export type StockUpdateManyWithoutLocationNestedInput = {
    create?: XOR<StockCreateWithoutLocationInput, StockUncheckedCreateWithoutLocationInput> | StockCreateWithoutLocationInput[] | StockUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: StockCreateOrConnectWithoutLocationInput | StockCreateOrConnectWithoutLocationInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutLocationInput | StockUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: StockCreateManyLocationInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutLocationInput | StockUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: StockUpdateManyWithWhereWithoutLocationInput | StockUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type FoodItemUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<FoodItemCreateWithoutLocationInput, FoodItemUncheckedCreateWithoutLocationInput> | FoodItemCreateWithoutLocationInput[] | FoodItemUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutLocationInput | FoodItemCreateOrConnectWithoutLocationInput[]
    upsert?: FoodItemUpsertWithWhereUniqueWithoutLocationInput | FoodItemUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: FoodItemCreateManyLocationInputEnvelope
    set?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    disconnect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    delete?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    update?: FoodItemUpdateWithWhereUniqueWithoutLocationInput | FoodItemUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: FoodItemUpdateManyWithWhereWithoutLocationInput | FoodItemUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: FoodItemScalarWhereInput | FoodItemScalarWhereInput[]
  }

  export type SupplyUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<SupplyCreateWithoutLocationInput, SupplyUncheckedCreateWithoutLocationInput> | SupplyCreateWithoutLocationInput[] | SupplyUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: SupplyCreateOrConnectWithoutLocationInput | SupplyCreateOrConnectWithoutLocationInput[]
    upsert?: SupplyUpsertWithWhereUniqueWithoutLocationInput | SupplyUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: SupplyCreateManyLocationInputEnvelope
    set?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
    disconnect?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
    delete?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
    connect?: SupplyWhereUniqueInput | SupplyWhereUniqueInput[]
    update?: SupplyUpdateWithWhereUniqueWithoutLocationInput | SupplyUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: SupplyUpdateManyWithWhereWithoutLocationInput | SupplyUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: SupplyScalarWhereInput | SupplyScalarWhereInput[]
  }

  export type StockUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<StockCreateWithoutLocationInput, StockUncheckedCreateWithoutLocationInput> | StockCreateWithoutLocationInput[] | StockUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: StockCreateOrConnectWithoutLocationInput | StockCreateOrConnectWithoutLocationInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutLocationInput | StockUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: StockCreateManyLocationInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutLocationInput | StockUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: StockUpdateManyWithWhereWithoutLocationInput | StockUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutFoodItemsInput = {
    create?: XOR<CategoryCreateWithoutFoodItemsInput, CategoryUncheckedCreateWithoutFoodItemsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutFoodItemsInput
    connect?: CategoryWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutFoodItemsInput = {
    create?: XOR<LocationCreateWithoutFoodItemsInput, LocationUncheckedCreateWithoutFoodItemsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutFoodItemsInput
    connect?: LocationWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoryUpdateOneWithoutFoodItemsNestedInput = {
    create?: XOR<CategoryCreateWithoutFoodItemsInput, CategoryUncheckedCreateWithoutFoodItemsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutFoodItemsInput
    upsert?: CategoryUpsertWithoutFoodItemsInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutFoodItemsInput, CategoryUpdateWithoutFoodItemsInput>, CategoryUncheckedUpdateWithoutFoodItemsInput>
  }

  export type LocationUpdateOneWithoutFoodItemsNestedInput = {
    create?: XOR<LocationCreateWithoutFoodItemsInput, LocationUncheckedCreateWithoutFoodItemsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutFoodItemsInput
    upsert?: LocationUpsertWithoutFoodItemsInput
    disconnect?: LocationWhereInput | boolean
    delete?: LocationWhereInput | boolean
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutFoodItemsInput, LocationUpdateWithoutFoodItemsInput>, LocationUncheckedUpdateWithoutFoodItemsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoryCreateNestedOneWithoutFoodsInput = {
    create?: XOR<CategoryCreateWithoutFoodsInput, CategoryUncheckedCreateWithoutFoodsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutFoodsInput
    connect?: CategoryWhereUniqueInput
  }

  export type NutritionFactCreateNestedOneWithoutFoodInput = {
    create?: XOR<NutritionFactCreateWithoutFoodInput, NutritionFactUncheckedCreateWithoutFoodInput>
    connectOrCreate?: NutritionFactCreateOrConnectWithoutFoodInput
    connect?: NutritionFactWhereUniqueInput
  }

  export type StockCreateNestedManyWithoutFoodInput = {
    create?: XOR<StockCreateWithoutFoodInput, StockUncheckedCreateWithoutFoodInput> | StockCreateWithoutFoodInput[] | StockUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: StockCreateOrConnectWithoutFoodInput | StockCreateOrConnectWithoutFoodInput[]
    createMany?: StockCreateManyFoodInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type NutritionFactUncheckedCreateNestedOneWithoutFoodInput = {
    create?: XOR<NutritionFactCreateWithoutFoodInput, NutritionFactUncheckedCreateWithoutFoodInput>
    connectOrCreate?: NutritionFactCreateOrConnectWithoutFoodInput
    connect?: NutritionFactWhereUniqueInput
  }

  export type StockUncheckedCreateNestedManyWithoutFoodInput = {
    create?: XOR<StockCreateWithoutFoodInput, StockUncheckedCreateWithoutFoodInput> | StockCreateWithoutFoodInput[] | StockUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: StockCreateOrConnectWithoutFoodInput | StockCreateOrConnectWithoutFoodInput[]
    createMany?: StockCreateManyFoodInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type CategoryUpdateOneWithoutFoodsNestedInput = {
    create?: XOR<CategoryCreateWithoutFoodsInput, CategoryUncheckedCreateWithoutFoodsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutFoodsInput
    upsert?: CategoryUpsertWithoutFoodsInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutFoodsInput, CategoryUpdateWithoutFoodsInput>, CategoryUncheckedUpdateWithoutFoodsInput>
  }

  export type NutritionFactUpdateOneWithoutFoodNestedInput = {
    create?: XOR<NutritionFactCreateWithoutFoodInput, NutritionFactUncheckedCreateWithoutFoodInput>
    connectOrCreate?: NutritionFactCreateOrConnectWithoutFoodInput
    upsert?: NutritionFactUpsertWithoutFoodInput
    disconnect?: NutritionFactWhereInput | boolean
    delete?: NutritionFactWhereInput | boolean
    connect?: NutritionFactWhereUniqueInput
    update?: XOR<XOR<NutritionFactUpdateToOneWithWhereWithoutFoodInput, NutritionFactUpdateWithoutFoodInput>, NutritionFactUncheckedUpdateWithoutFoodInput>
  }

  export type StockUpdateManyWithoutFoodNestedInput = {
    create?: XOR<StockCreateWithoutFoodInput, StockUncheckedCreateWithoutFoodInput> | StockCreateWithoutFoodInput[] | StockUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: StockCreateOrConnectWithoutFoodInput | StockCreateOrConnectWithoutFoodInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutFoodInput | StockUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: StockCreateManyFoodInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutFoodInput | StockUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: StockUpdateManyWithWhereWithoutFoodInput | StockUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type NutritionFactUncheckedUpdateOneWithoutFoodNestedInput = {
    create?: XOR<NutritionFactCreateWithoutFoodInput, NutritionFactUncheckedCreateWithoutFoodInput>
    connectOrCreate?: NutritionFactCreateOrConnectWithoutFoodInput
    upsert?: NutritionFactUpsertWithoutFoodInput
    disconnect?: NutritionFactWhereInput | boolean
    delete?: NutritionFactWhereInput | boolean
    connect?: NutritionFactWhereUniqueInput
    update?: XOR<XOR<NutritionFactUpdateToOneWithWhereWithoutFoodInput, NutritionFactUpdateWithoutFoodInput>, NutritionFactUncheckedUpdateWithoutFoodInput>
  }

  export type StockUncheckedUpdateManyWithoutFoodNestedInput = {
    create?: XOR<StockCreateWithoutFoodInput, StockUncheckedCreateWithoutFoodInput> | StockCreateWithoutFoodInput[] | StockUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: StockCreateOrConnectWithoutFoodInput | StockCreateOrConnectWithoutFoodInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutFoodInput | StockUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: StockCreateManyFoodInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutFoodInput | StockUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: StockUpdateManyWithWhereWithoutFoodInput | StockUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type FoodCreateNestedOneWithoutNutritionInput = {
    create?: XOR<FoodCreateWithoutNutritionInput, FoodUncheckedCreateWithoutNutritionInput>
    connectOrCreate?: FoodCreateOrConnectWithoutNutritionInput
    connect?: FoodWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FoodUpdateOneRequiredWithoutNutritionNestedInput = {
    create?: XOR<FoodCreateWithoutNutritionInput, FoodUncheckedCreateWithoutNutritionInput>
    connectOrCreate?: FoodCreateOrConnectWithoutNutritionInput
    upsert?: FoodUpsertWithoutNutritionInput
    connect?: FoodWhereUniqueInput
    update?: XOR<XOR<FoodUpdateToOneWithWhereWithoutNutritionInput, FoodUpdateWithoutNutritionInput>, FoodUncheckedUpdateWithoutNutritionInput>
  }

  export type FoodCreateNestedOneWithoutStocksInput = {
    create?: XOR<FoodCreateWithoutStocksInput, FoodUncheckedCreateWithoutStocksInput>
    connectOrCreate?: FoodCreateOrConnectWithoutStocksInput
    connect?: FoodWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutStocksInput = {
    create?: XOR<LocationCreateWithoutStocksInput, LocationUncheckedCreateWithoutStocksInput>
    connectOrCreate?: LocationCreateOrConnectWithoutStocksInput
    connect?: LocationWhereUniqueInput
  }

  export type ConsumptionPlanCreateNestedManyWithoutStockInput = {
    create?: XOR<ConsumptionPlanCreateWithoutStockInput, ConsumptionPlanUncheckedCreateWithoutStockInput> | ConsumptionPlanCreateWithoutStockInput[] | ConsumptionPlanUncheckedCreateWithoutStockInput[]
    connectOrCreate?: ConsumptionPlanCreateOrConnectWithoutStockInput | ConsumptionPlanCreateOrConnectWithoutStockInput[]
    createMany?: ConsumptionPlanCreateManyStockInputEnvelope
    connect?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
  }

  export type ConsumptionPlanUncheckedCreateNestedManyWithoutStockInput = {
    create?: XOR<ConsumptionPlanCreateWithoutStockInput, ConsumptionPlanUncheckedCreateWithoutStockInput> | ConsumptionPlanCreateWithoutStockInput[] | ConsumptionPlanUncheckedCreateWithoutStockInput[]
    connectOrCreate?: ConsumptionPlanCreateOrConnectWithoutStockInput | ConsumptionPlanCreateOrConnectWithoutStockInput[]
    createMany?: ConsumptionPlanCreateManyStockInputEnvelope
    connect?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type FoodUpdateOneRequiredWithoutStocksNestedInput = {
    create?: XOR<FoodCreateWithoutStocksInput, FoodUncheckedCreateWithoutStocksInput>
    connectOrCreate?: FoodCreateOrConnectWithoutStocksInput
    upsert?: FoodUpsertWithoutStocksInput
    connect?: FoodWhereUniqueInput
    update?: XOR<XOR<FoodUpdateToOneWithWhereWithoutStocksInput, FoodUpdateWithoutStocksInput>, FoodUncheckedUpdateWithoutStocksInput>
  }

  export type LocationUpdateOneWithoutStocksNestedInput = {
    create?: XOR<LocationCreateWithoutStocksInput, LocationUncheckedCreateWithoutStocksInput>
    connectOrCreate?: LocationCreateOrConnectWithoutStocksInput
    upsert?: LocationUpsertWithoutStocksInput
    disconnect?: LocationWhereInput | boolean
    delete?: LocationWhereInput | boolean
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutStocksInput, LocationUpdateWithoutStocksInput>, LocationUncheckedUpdateWithoutStocksInput>
  }

  export type ConsumptionPlanUpdateManyWithoutStockNestedInput = {
    create?: XOR<ConsumptionPlanCreateWithoutStockInput, ConsumptionPlanUncheckedCreateWithoutStockInput> | ConsumptionPlanCreateWithoutStockInput[] | ConsumptionPlanUncheckedCreateWithoutStockInput[]
    connectOrCreate?: ConsumptionPlanCreateOrConnectWithoutStockInput | ConsumptionPlanCreateOrConnectWithoutStockInput[]
    upsert?: ConsumptionPlanUpsertWithWhereUniqueWithoutStockInput | ConsumptionPlanUpsertWithWhereUniqueWithoutStockInput[]
    createMany?: ConsumptionPlanCreateManyStockInputEnvelope
    set?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
    disconnect?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
    delete?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
    connect?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
    update?: ConsumptionPlanUpdateWithWhereUniqueWithoutStockInput | ConsumptionPlanUpdateWithWhereUniqueWithoutStockInput[]
    updateMany?: ConsumptionPlanUpdateManyWithWhereWithoutStockInput | ConsumptionPlanUpdateManyWithWhereWithoutStockInput[]
    deleteMany?: ConsumptionPlanScalarWhereInput | ConsumptionPlanScalarWhereInput[]
  }

  export type ConsumptionPlanUncheckedUpdateManyWithoutStockNestedInput = {
    create?: XOR<ConsumptionPlanCreateWithoutStockInput, ConsumptionPlanUncheckedCreateWithoutStockInput> | ConsumptionPlanCreateWithoutStockInput[] | ConsumptionPlanUncheckedCreateWithoutStockInput[]
    connectOrCreate?: ConsumptionPlanCreateOrConnectWithoutStockInput | ConsumptionPlanCreateOrConnectWithoutStockInput[]
    upsert?: ConsumptionPlanUpsertWithWhereUniqueWithoutStockInput | ConsumptionPlanUpsertWithWhereUniqueWithoutStockInput[]
    createMany?: ConsumptionPlanCreateManyStockInputEnvelope
    set?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
    disconnect?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
    delete?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
    connect?: ConsumptionPlanWhereUniqueInput | ConsumptionPlanWhereUniqueInput[]
    update?: ConsumptionPlanUpdateWithWhereUniqueWithoutStockInput | ConsumptionPlanUpdateWithWhereUniqueWithoutStockInput[]
    updateMany?: ConsumptionPlanUpdateManyWithWhereWithoutStockInput | ConsumptionPlanUpdateManyWithWhereWithoutStockInput[]
    deleteMany?: ConsumptionPlanScalarWhereInput | ConsumptionPlanScalarWhereInput[]
  }

  export type PersonCreateNestedOneWithoutConsumptionPlansInput = {
    create?: XOR<PersonCreateWithoutConsumptionPlansInput, PersonUncheckedCreateWithoutConsumptionPlansInput>
    connectOrCreate?: PersonCreateOrConnectWithoutConsumptionPlansInput
    connect?: PersonWhereUniqueInput
  }

  export type StockCreateNestedOneWithoutConsumptionPlansInput = {
    create?: XOR<StockCreateWithoutConsumptionPlansInput, StockUncheckedCreateWithoutConsumptionPlansInput>
    connectOrCreate?: StockCreateOrConnectWithoutConsumptionPlansInput
    connect?: StockWhereUniqueInput
  }

  export type PersonUpdateOneRequiredWithoutConsumptionPlansNestedInput = {
    create?: XOR<PersonCreateWithoutConsumptionPlansInput, PersonUncheckedCreateWithoutConsumptionPlansInput>
    connectOrCreate?: PersonCreateOrConnectWithoutConsumptionPlansInput
    upsert?: PersonUpsertWithoutConsumptionPlansInput
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutConsumptionPlansInput, PersonUpdateWithoutConsumptionPlansInput>, PersonUncheckedUpdateWithoutConsumptionPlansInput>
  }

  export type StockUpdateOneRequiredWithoutConsumptionPlansNestedInput = {
    create?: XOR<StockCreateWithoutConsumptionPlansInput, StockUncheckedCreateWithoutConsumptionPlansInput>
    connectOrCreate?: StockCreateOrConnectWithoutConsumptionPlansInput
    upsert?: StockUpsertWithoutConsumptionPlansInput
    connect?: StockWhereUniqueInput
    update?: XOR<XOR<StockUpdateToOneWithWhereWithoutConsumptionPlansInput, StockUpdateWithoutConsumptionPlansInput>, StockUncheckedUpdateWithoutConsumptionPlansInput>
  }

  export type CategoryCreateNestedOneWithoutSuppliesInput = {
    create?: XOR<CategoryCreateWithoutSuppliesInput, CategoryUncheckedCreateWithoutSuppliesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSuppliesInput
    connect?: CategoryWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutSuppliesInput = {
    create?: XOR<LocationCreateWithoutSuppliesInput, LocationUncheckedCreateWithoutSuppliesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutSuppliesInput
    connect?: LocationWhereUniqueInput
  }

  export type CategoryUpdateOneWithoutSuppliesNestedInput = {
    create?: XOR<CategoryCreateWithoutSuppliesInput, CategoryUncheckedCreateWithoutSuppliesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSuppliesInput
    upsert?: CategoryUpsertWithoutSuppliesInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutSuppliesInput, CategoryUpdateWithoutSuppliesInput>, CategoryUncheckedUpdateWithoutSuppliesInput>
  }

  export type LocationUpdateOneWithoutSuppliesNestedInput = {
    create?: XOR<LocationCreateWithoutSuppliesInput, LocationUncheckedCreateWithoutSuppliesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutSuppliesInput
    upsert?: LocationUpsertWithoutSuppliesInput
    disconnect?: LocationWhereInput | boolean
    delete?: LocationWhereInput | boolean
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutSuppliesInput, LocationUpdateWithoutSuppliesInput>, LocationUncheckedUpdateWithoutSuppliesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ConsumptionPlanCreateWithoutPersonInput = {
    servingsPerDay: number
    startDate?: Date | string
    endDate?: Date | string | null
    stock: StockCreateNestedOneWithoutConsumptionPlansInput
  }

  export type ConsumptionPlanUncheckedCreateWithoutPersonInput = {
    id?: number
    stockId: number
    servingsPerDay: number
    startDate?: Date | string
    endDate?: Date | string | null
  }

  export type ConsumptionPlanCreateOrConnectWithoutPersonInput = {
    where: ConsumptionPlanWhereUniqueInput
    create: XOR<ConsumptionPlanCreateWithoutPersonInput, ConsumptionPlanUncheckedCreateWithoutPersonInput>
  }

  export type ConsumptionPlanCreateManyPersonInputEnvelope = {
    data: ConsumptionPlanCreateManyPersonInput | ConsumptionPlanCreateManyPersonInput[]
  }

  export type ConsumptionPlanUpsertWithWhereUniqueWithoutPersonInput = {
    where: ConsumptionPlanWhereUniqueInput
    update: XOR<ConsumptionPlanUpdateWithoutPersonInput, ConsumptionPlanUncheckedUpdateWithoutPersonInput>
    create: XOR<ConsumptionPlanCreateWithoutPersonInput, ConsumptionPlanUncheckedCreateWithoutPersonInput>
  }

  export type ConsumptionPlanUpdateWithWhereUniqueWithoutPersonInput = {
    where: ConsumptionPlanWhereUniqueInput
    data: XOR<ConsumptionPlanUpdateWithoutPersonInput, ConsumptionPlanUncheckedUpdateWithoutPersonInput>
  }

  export type ConsumptionPlanUpdateManyWithWhereWithoutPersonInput = {
    where: ConsumptionPlanScalarWhereInput
    data: XOR<ConsumptionPlanUpdateManyMutationInput, ConsumptionPlanUncheckedUpdateManyWithoutPersonInput>
  }

  export type ConsumptionPlanScalarWhereInput = {
    AND?: ConsumptionPlanScalarWhereInput | ConsumptionPlanScalarWhereInput[]
    OR?: ConsumptionPlanScalarWhereInput[]
    NOT?: ConsumptionPlanScalarWhereInput | ConsumptionPlanScalarWhereInput[]
    id?: IntFilter<"ConsumptionPlan"> | number
    personId?: IntFilter<"ConsumptionPlan"> | number
    stockId?: IntFilter<"ConsumptionPlan"> | number
    servingsPerDay?: FloatFilter<"ConsumptionPlan"> | number
    startDate?: DateTimeFilter<"ConsumptionPlan"> | Date | string
    endDate?: DateTimeNullableFilter<"ConsumptionPlan"> | Date | string | null
  }

  export type FoodItemCreateWithoutCategoryInput = {
    name: string
    quantity: number
    unit: string
    caloriesPerUnit: number
    expiryDate: Date | string
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: number | null
    servingsPerUnit?: number | null
    barcode?: string | null
    notes?: string | null
    location?: LocationCreateNestedOneWithoutFoodItemsInput
  }

  export type FoodItemUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    quantity: number
    unit: string
    caloriesPerUnit: number
    expiryDate: Date | string
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: number | null
    servingsPerUnit?: number | null
    barcode?: string | null
    notes?: string | null
    locationId?: number | null
  }

  export type FoodItemCreateOrConnectWithoutCategoryInput = {
    where: FoodItemWhereUniqueInput
    create: XOR<FoodItemCreateWithoutCategoryInput, FoodItemUncheckedCreateWithoutCategoryInput>
  }

  export type FoodItemCreateManyCategoryInputEnvelope = {
    data: FoodItemCreateManyCategoryInput | FoodItemCreateManyCategoryInput[]
  }

  export type SupplyCreateWithoutCategoryInput = {
    name: string
    quantity: number
    unit?: string | null
    expiryDate?: Date | string | null
    notes?: string | null
    location?: LocationCreateNestedOneWithoutSuppliesInput
  }

  export type SupplyUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    quantity: number
    unit?: string | null
    expiryDate?: Date | string | null
    notes?: string | null
    locationId?: number | null
  }

  export type SupplyCreateOrConnectWithoutCategoryInput = {
    where: SupplyWhereUniqueInput
    create: XOR<SupplyCreateWithoutCategoryInput, SupplyUncheckedCreateWithoutCategoryInput>
  }

  export type SupplyCreateManyCategoryInputEnvelope = {
    data: SupplyCreateManyCategoryInput | SupplyCreateManyCategoryInput[]
  }

  export type FoodCreateWithoutCategoryInput = {
    name: string
    brand?: string | null
    upc?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nutrition?: NutritionFactCreateNestedOneWithoutFoodInput
    stocks?: StockCreateNestedManyWithoutFoodInput
  }

  export type FoodUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    brand?: string | null
    upc?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nutrition?: NutritionFactUncheckedCreateNestedOneWithoutFoodInput
    stocks?: StockUncheckedCreateNestedManyWithoutFoodInput
  }

  export type FoodCreateOrConnectWithoutCategoryInput = {
    where: FoodWhereUniqueInput
    create: XOR<FoodCreateWithoutCategoryInput, FoodUncheckedCreateWithoutCategoryInput>
  }

  export type FoodCreateManyCategoryInputEnvelope = {
    data: FoodCreateManyCategoryInput | FoodCreateManyCategoryInput[]
  }

  export type FoodItemUpsertWithWhereUniqueWithoutCategoryInput = {
    where: FoodItemWhereUniqueInput
    update: XOR<FoodItemUpdateWithoutCategoryInput, FoodItemUncheckedUpdateWithoutCategoryInput>
    create: XOR<FoodItemCreateWithoutCategoryInput, FoodItemUncheckedCreateWithoutCategoryInput>
  }

  export type FoodItemUpdateWithWhereUniqueWithoutCategoryInput = {
    where: FoodItemWhereUniqueInput
    data: XOR<FoodItemUpdateWithoutCategoryInput, FoodItemUncheckedUpdateWithoutCategoryInput>
  }

  export type FoodItemUpdateManyWithWhereWithoutCategoryInput = {
    where: FoodItemScalarWhereInput
    data: XOR<FoodItemUpdateManyMutationInput, FoodItemUncheckedUpdateManyWithoutCategoryInput>
  }

  export type FoodItemScalarWhereInput = {
    AND?: FoodItemScalarWhereInput | FoodItemScalarWhereInput[]
    OR?: FoodItemScalarWhereInput[]
    NOT?: FoodItemScalarWhereInput | FoodItemScalarWhereInput[]
    id?: IntFilter<"FoodItem"> | number
    name?: StringFilter<"FoodItem"> | string
    quantity?: IntFilter<"FoodItem"> | number
    unit?: StringFilter<"FoodItem"> | string
    caloriesPerUnit?: IntFilter<"FoodItem"> | number
    expiryDate?: DateTimeFilter<"FoodItem"> | Date | string
    protein?: FloatNullableFilter<"FoodItem"> | number | null
    carbs?: FloatNullableFilter<"FoodItem"> | number | null
    fat?: FloatNullableFilter<"FoodItem"> | number | null
    servingSize?: FloatNullableFilter<"FoodItem"> | number | null
    servingsPerUnit?: FloatNullableFilter<"FoodItem"> | number | null
    barcode?: StringNullableFilter<"FoodItem"> | string | null
    notes?: StringNullableFilter<"FoodItem"> | string | null
    categoryId?: IntNullableFilter<"FoodItem"> | number | null
    locationId?: IntNullableFilter<"FoodItem"> | number | null
  }

  export type SupplyUpsertWithWhereUniqueWithoutCategoryInput = {
    where: SupplyWhereUniqueInput
    update: XOR<SupplyUpdateWithoutCategoryInput, SupplyUncheckedUpdateWithoutCategoryInput>
    create: XOR<SupplyCreateWithoutCategoryInput, SupplyUncheckedCreateWithoutCategoryInput>
  }

  export type SupplyUpdateWithWhereUniqueWithoutCategoryInput = {
    where: SupplyWhereUniqueInput
    data: XOR<SupplyUpdateWithoutCategoryInput, SupplyUncheckedUpdateWithoutCategoryInput>
  }

  export type SupplyUpdateManyWithWhereWithoutCategoryInput = {
    where: SupplyScalarWhereInput
    data: XOR<SupplyUpdateManyMutationInput, SupplyUncheckedUpdateManyWithoutCategoryInput>
  }

  export type SupplyScalarWhereInput = {
    AND?: SupplyScalarWhereInput | SupplyScalarWhereInput[]
    OR?: SupplyScalarWhereInput[]
    NOT?: SupplyScalarWhereInput | SupplyScalarWhereInput[]
    id?: IntFilter<"Supply"> | number
    name?: StringFilter<"Supply"> | string
    quantity?: IntFilter<"Supply"> | number
    unit?: StringNullableFilter<"Supply"> | string | null
    expiryDate?: DateTimeNullableFilter<"Supply"> | Date | string | null
    notes?: StringNullableFilter<"Supply"> | string | null
    categoryId?: IntNullableFilter<"Supply"> | number | null
    locationId?: IntNullableFilter<"Supply"> | number | null
  }

  export type FoodUpsertWithWhereUniqueWithoutCategoryInput = {
    where: FoodWhereUniqueInput
    update: XOR<FoodUpdateWithoutCategoryInput, FoodUncheckedUpdateWithoutCategoryInput>
    create: XOR<FoodCreateWithoutCategoryInput, FoodUncheckedCreateWithoutCategoryInput>
  }

  export type FoodUpdateWithWhereUniqueWithoutCategoryInput = {
    where: FoodWhereUniqueInput
    data: XOR<FoodUpdateWithoutCategoryInput, FoodUncheckedUpdateWithoutCategoryInput>
  }

  export type FoodUpdateManyWithWhereWithoutCategoryInput = {
    where: FoodScalarWhereInput
    data: XOR<FoodUpdateManyMutationInput, FoodUncheckedUpdateManyWithoutCategoryInput>
  }

  export type FoodScalarWhereInput = {
    AND?: FoodScalarWhereInput | FoodScalarWhereInput[]
    OR?: FoodScalarWhereInput[]
    NOT?: FoodScalarWhereInput | FoodScalarWhereInput[]
    id?: IntFilter<"Food"> | number
    name?: StringFilter<"Food"> | string
    brand?: StringNullableFilter<"Food"> | string | null
    upc?: StringNullableFilter<"Food"> | string | null
    categoryId?: IntNullableFilter<"Food"> | number | null
    createdAt?: DateTimeFilter<"Food"> | Date | string
    updatedAt?: DateTimeFilter<"Food"> | Date | string
  }

  export type FoodItemCreateWithoutLocationInput = {
    name: string
    quantity: number
    unit: string
    caloriesPerUnit: number
    expiryDate: Date | string
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: number | null
    servingsPerUnit?: number | null
    barcode?: string | null
    notes?: string | null
    category?: CategoryCreateNestedOneWithoutFoodItemsInput
  }

  export type FoodItemUncheckedCreateWithoutLocationInput = {
    id?: number
    name: string
    quantity: number
    unit: string
    caloriesPerUnit: number
    expiryDate: Date | string
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: number | null
    servingsPerUnit?: number | null
    barcode?: string | null
    notes?: string | null
    categoryId?: number | null
  }

  export type FoodItemCreateOrConnectWithoutLocationInput = {
    where: FoodItemWhereUniqueInput
    create: XOR<FoodItemCreateWithoutLocationInput, FoodItemUncheckedCreateWithoutLocationInput>
  }

  export type FoodItemCreateManyLocationInputEnvelope = {
    data: FoodItemCreateManyLocationInput | FoodItemCreateManyLocationInput[]
  }

  export type SupplyCreateWithoutLocationInput = {
    name: string
    quantity: number
    unit?: string | null
    expiryDate?: Date | string | null
    notes?: string | null
    category?: CategoryCreateNestedOneWithoutSuppliesInput
  }

  export type SupplyUncheckedCreateWithoutLocationInput = {
    id?: number
    name: string
    quantity: number
    unit?: string | null
    expiryDate?: Date | string | null
    notes?: string | null
    categoryId?: number | null
  }

  export type SupplyCreateOrConnectWithoutLocationInput = {
    where: SupplyWhereUniqueInput
    create: XOR<SupplyCreateWithoutLocationInput, SupplyUncheckedCreateWithoutLocationInput>
  }

  export type SupplyCreateManyLocationInputEnvelope = {
    data: SupplyCreateManyLocationInput | SupplyCreateManyLocationInput[]
  }

  export type StockCreateWithoutLocationInput = {
    quantity: number
    expiryDate?: Date | string | null
    servingsRemaining?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    food: FoodCreateNestedOneWithoutStocksInput
    consumptionPlans?: ConsumptionPlanCreateNestedManyWithoutStockInput
  }

  export type StockUncheckedCreateWithoutLocationInput = {
    id?: number
    foodId: number
    quantity: number
    expiryDate?: Date | string | null
    servingsRemaining?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consumptionPlans?: ConsumptionPlanUncheckedCreateNestedManyWithoutStockInput
  }

  export type StockCreateOrConnectWithoutLocationInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutLocationInput, StockUncheckedCreateWithoutLocationInput>
  }

  export type StockCreateManyLocationInputEnvelope = {
    data: StockCreateManyLocationInput | StockCreateManyLocationInput[]
  }

  export type FoodItemUpsertWithWhereUniqueWithoutLocationInput = {
    where: FoodItemWhereUniqueInput
    update: XOR<FoodItemUpdateWithoutLocationInput, FoodItemUncheckedUpdateWithoutLocationInput>
    create: XOR<FoodItemCreateWithoutLocationInput, FoodItemUncheckedCreateWithoutLocationInput>
  }

  export type FoodItemUpdateWithWhereUniqueWithoutLocationInput = {
    where: FoodItemWhereUniqueInput
    data: XOR<FoodItemUpdateWithoutLocationInput, FoodItemUncheckedUpdateWithoutLocationInput>
  }

  export type FoodItemUpdateManyWithWhereWithoutLocationInput = {
    where: FoodItemScalarWhereInput
    data: XOR<FoodItemUpdateManyMutationInput, FoodItemUncheckedUpdateManyWithoutLocationInput>
  }

  export type SupplyUpsertWithWhereUniqueWithoutLocationInput = {
    where: SupplyWhereUniqueInput
    update: XOR<SupplyUpdateWithoutLocationInput, SupplyUncheckedUpdateWithoutLocationInput>
    create: XOR<SupplyCreateWithoutLocationInput, SupplyUncheckedCreateWithoutLocationInput>
  }

  export type SupplyUpdateWithWhereUniqueWithoutLocationInput = {
    where: SupplyWhereUniqueInput
    data: XOR<SupplyUpdateWithoutLocationInput, SupplyUncheckedUpdateWithoutLocationInput>
  }

  export type SupplyUpdateManyWithWhereWithoutLocationInput = {
    where: SupplyScalarWhereInput
    data: XOR<SupplyUpdateManyMutationInput, SupplyUncheckedUpdateManyWithoutLocationInput>
  }

  export type StockUpsertWithWhereUniqueWithoutLocationInput = {
    where: StockWhereUniqueInput
    update: XOR<StockUpdateWithoutLocationInput, StockUncheckedUpdateWithoutLocationInput>
    create: XOR<StockCreateWithoutLocationInput, StockUncheckedCreateWithoutLocationInput>
  }

  export type StockUpdateWithWhereUniqueWithoutLocationInput = {
    where: StockWhereUniqueInput
    data: XOR<StockUpdateWithoutLocationInput, StockUncheckedUpdateWithoutLocationInput>
  }

  export type StockUpdateManyWithWhereWithoutLocationInput = {
    where: StockScalarWhereInput
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyWithoutLocationInput>
  }

  export type StockScalarWhereInput = {
    AND?: StockScalarWhereInput | StockScalarWhereInput[]
    OR?: StockScalarWhereInput[]
    NOT?: StockScalarWhereInput | StockScalarWhereInput[]
    id?: IntFilter<"Stock"> | number
    foodId?: IntFilter<"Stock"> | number
    quantity?: IntFilter<"Stock"> | number
    locationId?: IntNullableFilter<"Stock"> | number | null
    expiryDate?: DateTimeNullableFilter<"Stock"> | Date | string | null
    servingsRemaining?: FloatNullableFilter<"Stock"> | number | null
    notes?: StringNullableFilter<"Stock"> | string | null
    createdAt?: DateTimeFilter<"Stock"> | Date | string
    updatedAt?: DateTimeFilter<"Stock"> | Date | string
  }

  export type CategoryCreateWithoutFoodItemsInput = {
    name: string
    description?: string | null
    supplies?: SupplyCreateNestedManyWithoutCategoryInput
    foods?: FoodCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutFoodItemsInput = {
    id?: number
    name: string
    description?: string | null
    supplies?: SupplyUncheckedCreateNestedManyWithoutCategoryInput
    foods?: FoodUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutFoodItemsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutFoodItemsInput, CategoryUncheckedCreateWithoutFoodItemsInput>
  }

  export type LocationCreateWithoutFoodItemsInput = {
    name: string
    description?: string | null
    supplies?: SupplyCreateNestedManyWithoutLocationInput
    stocks?: StockCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutFoodItemsInput = {
    id?: number
    name: string
    description?: string | null
    supplies?: SupplyUncheckedCreateNestedManyWithoutLocationInput
    stocks?: StockUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutFoodItemsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutFoodItemsInput, LocationUncheckedCreateWithoutFoodItemsInput>
  }

  export type CategoryUpsertWithoutFoodItemsInput = {
    update: XOR<CategoryUpdateWithoutFoodItemsInput, CategoryUncheckedUpdateWithoutFoodItemsInput>
    create: XOR<CategoryCreateWithoutFoodItemsInput, CategoryUncheckedCreateWithoutFoodItemsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutFoodItemsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutFoodItemsInput, CategoryUncheckedUpdateWithoutFoodItemsInput>
  }

  export type CategoryUpdateWithoutFoodItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    supplies?: SupplyUpdateManyWithoutCategoryNestedInput
    foods?: FoodUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutFoodItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    supplies?: SupplyUncheckedUpdateManyWithoutCategoryNestedInput
    foods?: FoodUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type LocationUpsertWithoutFoodItemsInput = {
    update: XOR<LocationUpdateWithoutFoodItemsInput, LocationUncheckedUpdateWithoutFoodItemsInput>
    create: XOR<LocationCreateWithoutFoodItemsInput, LocationUncheckedCreateWithoutFoodItemsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutFoodItemsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutFoodItemsInput, LocationUncheckedUpdateWithoutFoodItemsInput>
  }

  export type LocationUpdateWithoutFoodItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    supplies?: SupplyUpdateManyWithoutLocationNestedInput
    stocks?: StockUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutFoodItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    supplies?: SupplyUncheckedUpdateManyWithoutLocationNestedInput
    stocks?: StockUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type CategoryCreateWithoutFoodsInput = {
    name: string
    description?: string | null
    foodItems?: FoodItemCreateNestedManyWithoutCategoryInput
    supplies?: SupplyCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutFoodsInput = {
    id?: number
    name: string
    description?: string | null
    foodItems?: FoodItemUncheckedCreateNestedManyWithoutCategoryInput
    supplies?: SupplyUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutFoodsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutFoodsInput, CategoryUncheckedCreateWithoutFoodsInput>
  }

  export type NutritionFactCreateWithoutFoodInput = {
    calories: number
    protein: number
    carbs: number
    fat: number
    fiber?: number | null
    sodium?: number | null
    servingSize?: number | null
    servingsPerUnit?: number | null
    fetchedAt?: Date | string
  }

  export type NutritionFactUncheckedCreateWithoutFoodInput = {
    id?: number
    calories: number
    protein: number
    carbs: number
    fat: number
    fiber?: number | null
    sodium?: number | null
    servingSize?: number | null
    servingsPerUnit?: number | null
    fetchedAt?: Date | string
  }

  export type NutritionFactCreateOrConnectWithoutFoodInput = {
    where: NutritionFactWhereUniqueInput
    create: XOR<NutritionFactCreateWithoutFoodInput, NutritionFactUncheckedCreateWithoutFoodInput>
  }

  export type StockCreateWithoutFoodInput = {
    quantity: number
    expiryDate?: Date | string | null
    servingsRemaining?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: LocationCreateNestedOneWithoutStocksInput
    consumptionPlans?: ConsumptionPlanCreateNestedManyWithoutStockInput
  }

  export type StockUncheckedCreateWithoutFoodInput = {
    id?: number
    quantity: number
    locationId?: number | null
    expiryDate?: Date | string | null
    servingsRemaining?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consumptionPlans?: ConsumptionPlanUncheckedCreateNestedManyWithoutStockInput
  }

  export type StockCreateOrConnectWithoutFoodInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutFoodInput, StockUncheckedCreateWithoutFoodInput>
  }

  export type StockCreateManyFoodInputEnvelope = {
    data: StockCreateManyFoodInput | StockCreateManyFoodInput[]
  }

  export type CategoryUpsertWithoutFoodsInput = {
    update: XOR<CategoryUpdateWithoutFoodsInput, CategoryUncheckedUpdateWithoutFoodsInput>
    create: XOR<CategoryCreateWithoutFoodsInput, CategoryUncheckedCreateWithoutFoodsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutFoodsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutFoodsInput, CategoryUncheckedUpdateWithoutFoodsInput>
  }

  export type CategoryUpdateWithoutFoodsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    foodItems?: FoodItemUpdateManyWithoutCategoryNestedInput
    supplies?: SupplyUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutFoodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    foodItems?: FoodItemUncheckedUpdateManyWithoutCategoryNestedInput
    supplies?: SupplyUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type NutritionFactUpsertWithoutFoodInput = {
    update: XOR<NutritionFactUpdateWithoutFoodInput, NutritionFactUncheckedUpdateWithoutFoodInput>
    create: XOR<NutritionFactCreateWithoutFoodInput, NutritionFactUncheckedCreateWithoutFoodInput>
    where?: NutritionFactWhereInput
  }

  export type NutritionFactUpdateToOneWithWhereWithoutFoodInput = {
    where?: NutritionFactWhereInput
    data: XOR<NutritionFactUpdateWithoutFoodInput, NutritionFactUncheckedUpdateWithoutFoodInput>
  }

  export type NutritionFactUpdateWithoutFoodInput = {
    calories?: FloatFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    sodium?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    servingsPerUnit?: NullableFloatFieldUpdateOperationsInput | number | null
    fetchedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NutritionFactUncheckedUpdateWithoutFoodInput = {
    id?: IntFieldUpdateOperationsInput | number
    calories?: FloatFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    sodium?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    servingsPerUnit?: NullableFloatFieldUpdateOperationsInput | number | null
    fetchedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockUpsertWithWhereUniqueWithoutFoodInput = {
    where: StockWhereUniqueInput
    update: XOR<StockUpdateWithoutFoodInput, StockUncheckedUpdateWithoutFoodInput>
    create: XOR<StockCreateWithoutFoodInput, StockUncheckedCreateWithoutFoodInput>
  }

  export type StockUpdateWithWhereUniqueWithoutFoodInput = {
    where: StockWhereUniqueInput
    data: XOR<StockUpdateWithoutFoodInput, StockUncheckedUpdateWithoutFoodInput>
  }

  export type StockUpdateManyWithWhereWithoutFoodInput = {
    where: StockScalarWhereInput
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyWithoutFoodInput>
  }

  export type FoodCreateWithoutNutritionInput = {
    name: string
    brand?: string | null
    upc?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: CategoryCreateNestedOneWithoutFoodsInput
    stocks?: StockCreateNestedManyWithoutFoodInput
  }

  export type FoodUncheckedCreateWithoutNutritionInput = {
    id?: number
    name: string
    brand?: string | null
    upc?: string | null
    categoryId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stocks?: StockUncheckedCreateNestedManyWithoutFoodInput
  }

  export type FoodCreateOrConnectWithoutNutritionInput = {
    where: FoodWhereUniqueInput
    create: XOR<FoodCreateWithoutNutritionInput, FoodUncheckedCreateWithoutNutritionInput>
  }

  export type FoodUpsertWithoutNutritionInput = {
    update: XOR<FoodUpdateWithoutNutritionInput, FoodUncheckedUpdateWithoutNutritionInput>
    create: XOR<FoodCreateWithoutNutritionInput, FoodUncheckedCreateWithoutNutritionInput>
    where?: FoodWhereInput
  }

  export type FoodUpdateToOneWithWhereWithoutNutritionInput = {
    where?: FoodWhereInput
    data: XOR<FoodUpdateWithoutNutritionInput, FoodUncheckedUpdateWithoutNutritionInput>
  }

  export type FoodUpdateWithoutNutritionInput = {
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutFoodsNestedInput
    stocks?: StockUpdateManyWithoutFoodNestedInput
  }

  export type FoodUncheckedUpdateWithoutNutritionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: StockUncheckedUpdateManyWithoutFoodNestedInput
  }

  export type FoodCreateWithoutStocksInput = {
    name: string
    brand?: string | null
    upc?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: CategoryCreateNestedOneWithoutFoodsInput
    nutrition?: NutritionFactCreateNestedOneWithoutFoodInput
  }

  export type FoodUncheckedCreateWithoutStocksInput = {
    id?: number
    name: string
    brand?: string | null
    upc?: string | null
    categoryId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nutrition?: NutritionFactUncheckedCreateNestedOneWithoutFoodInput
  }

  export type FoodCreateOrConnectWithoutStocksInput = {
    where: FoodWhereUniqueInput
    create: XOR<FoodCreateWithoutStocksInput, FoodUncheckedCreateWithoutStocksInput>
  }

  export type LocationCreateWithoutStocksInput = {
    name: string
    description?: string | null
    foodItems?: FoodItemCreateNestedManyWithoutLocationInput
    supplies?: SupplyCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutStocksInput = {
    id?: number
    name: string
    description?: string | null
    foodItems?: FoodItemUncheckedCreateNestedManyWithoutLocationInput
    supplies?: SupplyUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutStocksInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutStocksInput, LocationUncheckedCreateWithoutStocksInput>
  }

  export type ConsumptionPlanCreateWithoutStockInput = {
    servingsPerDay: number
    startDate?: Date | string
    endDate?: Date | string | null
    person: PersonCreateNestedOneWithoutConsumptionPlansInput
  }

  export type ConsumptionPlanUncheckedCreateWithoutStockInput = {
    id?: number
    personId: number
    servingsPerDay: number
    startDate?: Date | string
    endDate?: Date | string | null
  }

  export type ConsumptionPlanCreateOrConnectWithoutStockInput = {
    where: ConsumptionPlanWhereUniqueInput
    create: XOR<ConsumptionPlanCreateWithoutStockInput, ConsumptionPlanUncheckedCreateWithoutStockInput>
  }

  export type ConsumptionPlanCreateManyStockInputEnvelope = {
    data: ConsumptionPlanCreateManyStockInput | ConsumptionPlanCreateManyStockInput[]
  }

  export type FoodUpsertWithoutStocksInput = {
    update: XOR<FoodUpdateWithoutStocksInput, FoodUncheckedUpdateWithoutStocksInput>
    create: XOR<FoodCreateWithoutStocksInput, FoodUncheckedCreateWithoutStocksInput>
    where?: FoodWhereInput
  }

  export type FoodUpdateToOneWithWhereWithoutStocksInput = {
    where?: FoodWhereInput
    data: XOR<FoodUpdateWithoutStocksInput, FoodUncheckedUpdateWithoutStocksInput>
  }

  export type FoodUpdateWithoutStocksInput = {
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutFoodsNestedInput
    nutrition?: NutritionFactUpdateOneWithoutFoodNestedInput
  }

  export type FoodUncheckedUpdateWithoutStocksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutrition?: NutritionFactUncheckedUpdateOneWithoutFoodNestedInput
  }

  export type LocationUpsertWithoutStocksInput = {
    update: XOR<LocationUpdateWithoutStocksInput, LocationUncheckedUpdateWithoutStocksInput>
    create: XOR<LocationCreateWithoutStocksInput, LocationUncheckedCreateWithoutStocksInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutStocksInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutStocksInput, LocationUncheckedUpdateWithoutStocksInput>
  }

  export type LocationUpdateWithoutStocksInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    foodItems?: FoodItemUpdateManyWithoutLocationNestedInput
    supplies?: SupplyUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutStocksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    foodItems?: FoodItemUncheckedUpdateManyWithoutLocationNestedInput
    supplies?: SupplyUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type ConsumptionPlanUpsertWithWhereUniqueWithoutStockInput = {
    where: ConsumptionPlanWhereUniqueInput
    update: XOR<ConsumptionPlanUpdateWithoutStockInput, ConsumptionPlanUncheckedUpdateWithoutStockInput>
    create: XOR<ConsumptionPlanCreateWithoutStockInput, ConsumptionPlanUncheckedCreateWithoutStockInput>
  }

  export type ConsumptionPlanUpdateWithWhereUniqueWithoutStockInput = {
    where: ConsumptionPlanWhereUniqueInput
    data: XOR<ConsumptionPlanUpdateWithoutStockInput, ConsumptionPlanUncheckedUpdateWithoutStockInput>
  }

  export type ConsumptionPlanUpdateManyWithWhereWithoutStockInput = {
    where: ConsumptionPlanScalarWhereInput
    data: XOR<ConsumptionPlanUpdateManyMutationInput, ConsumptionPlanUncheckedUpdateManyWithoutStockInput>
  }

  export type PersonCreateWithoutConsumptionPlansInput = {
    name: string
    age: number
    dietaryRestrictions?: string | null
    dailyConsumption: number
  }

  export type PersonUncheckedCreateWithoutConsumptionPlansInput = {
    id?: number
    name: string
    age: number
    dietaryRestrictions?: string | null
    dailyConsumption: number
  }

  export type PersonCreateOrConnectWithoutConsumptionPlansInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutConsumptionPlansInput, PersonUncheckedCreateWithoutConsumptionPlansInput>
  }

  export type StockCreateWithoutConsumptionPlansInput = {
    quantity: number
    expiryDate?: Date | string | null
    servingsRemaining?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    food: FoodCreateNestedOneWithoutStocksInput
    location?: LocationCreateNestedOneWithoutStocksInput
  }

  export type StockUncheckedCreateWithoutConsumptionPlansInput = {
    id?: number
    foodId: number
    quantity: number
    locationId?: number | null
    expiryDate?: Date | string | null
    servingsRemaining?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StockCreateOrConnectWithoutConsumptionPlansInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutConsumptionPlansInput, StockUncheckedCreateWithoutConsumptionPlansInput>
  }

  export type PersonUpsertWithoutConsumptionPlansInput = {
    update: XOR<PersonUpdateWithoutConsumptionPlansInput, PersonUncheckedUpdateWithoutConsumptionPlansInput>
    create: XOR<PersonCreateWithoutConsumptionPlansInput, PersonUncheckedCreateWithoutConsumptionPlansInput>
    where?: PersonWhereInput
  }

  export type PersonUpdateToOneWithWhereWithoutConsumptionPlansInput = {
    where?: PersonWhereInput
    data: XOR<PersonUpdateWithoutConsumptionPlansInput, PersonUncheckedUpdateWithoutConsumptionPlansInput>
  }

  export type PersonUpdateWithoutConsumptionPlansInput = {
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    dietaryRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    dailyConsumption?: IntFieldUpdateOperationsInput | number
  }

  export type PersonUncheckedUpdateWithoutConsumptionPlansInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    dietaryRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    dailyConsumption?: IntFieldUpdateOperationsInput | number
  }

  export type StockUpsertWithoutConsumptionPlansInput = {
    update: XOR<StockUpdateWithoutConsumptionPlansInput, StockUncheckedUpdateWithoutConsumptionPlansInput>
    create: XOR<StockCreateWithoutConsumptionPlansInput, StockUncheckedCreateWithoutConsumptionPlansInput>
    where?: StockWhereInput
  }

  export type StockUpdateToOneWithWhereWithoutConsumptionPlansInput = {
    where?: StockWhereInput
    data: XOR<StockUpdateWithoutConsumptionPlansInput, StockUncheckedUpdateWithoutConsumptionPlansInput>
  }

  export type StockUpdateWithoutConsumptionPlansInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    servingsRemaining?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    food?: FoodUpdateOneRequiredWithoutStocksNestedInput
    location?: LocationUpdateOneWithoutStocksNestedInput
  }

  export type StockUncheckedUpdateWithoutConsumptionPlansInput = {
    id?: IntFieldUpdateOperationsInput | number
    foodId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    servingsRemaining?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateWithoutSuppliesInput = {
    name: string
    description?: string | null
    foodItems?: FoodItemCreateNestedManyWithoutCategoryInput
    foods?: FoodCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutSuppliesInput = {
    id?: number
    name: string
    description?: string | null
    foodItems?: FoodItemUncheckedCreateNestedManyWithoutCategoryInput
    foods?: FoodUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutSuppliesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutSuppliesInput, CategoryUncheckedCreateWithoutSuppliesInput>
  }

  export type LocationCreateWithoutSuppliesInput = {
    name: string
    description?: string | null
    foodItems?: FoodItemCreateNestedManyWithoutLocationInput
    stocks?: StockCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutSuppliesInput = {
    id?: number
    name: string
    description?: string | null
    foodItems?: FoodItemUncheckedCreateNestedManyWithoutLocationInput
    stocks?: StockUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutSuppliesInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutSuppliesInput, LocationUncheckedCreateWithoutSuppliesInput>
  }

  export type CategoryUpsertWithoutSuppliesInput = {
    update: XOR<CategoryUpdateWithoutSuppliesInput, CategoryUncheckedUpdateWithoutSuppliesInput>
    create: XOR<CategoryCreateWithoutSuppliesInput, CategoryUncheckedCreateWithoutSuppliesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutSuppliesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutSuppliesInput, CategoryUncheckedUpdateWithoutSuppliesInput>
  }

  export type CategoryUpdateWithoutSuppliesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    foodItems?: FoodItemUpdateManyWithoutCategoryNestedInput
    foods?: FoodUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutSuppliesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    foodItems?: FoodItemUncheckedUpdateManyWithoutCategoryNestedInput
    foods?: FoodUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type LocationUpsertWithoutSuppliesInput = {
    update: XOR<LocationUpdateWithoutSuppliesInput, LocationUncheckedUpdateWithoutSuppliesInput>
    create: XOR<LocationCreateWithoutSuppliesInput, LocationUncheckedCreateWithoutSuppliesInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutSuppliesInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutSuppliesInput, LocationUncheckedUpdateWithoutSuppliesInput>
  }

  export type LocationUpdateWithoutSuppliesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    foodItems?: FoodItemUpdateManyWithoutLocationNestedInput
    stocks?: StockUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutSuppliesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    foodItems?: FoodItemUncheckedUpdateManyWithoutLocationNestedInput
    stocks?: StockUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type ConsumptionPlanCreateManyPersonInput = {
    id?: number
    stockId: number
    servingsPerDay: number
    startDate?: Date | string
    endDate?: Date | string | null
  }

  export type ConsumptionPlanUpdateWithoutPersonInput = {
    servingsPerDay?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stock?: StockUpdateOneRequiredWithoutConsumptionPlansNestedInput
  }

  export type ConsumptionPlanUncheckedUpdateWithoutPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    stockId?: IntFieldUpdateOperationsInput | number
    servingsPerDay?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ConsumptionPlanUncheckedUpdateManyWithoutPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    stockId?: IntFieldUpdateOperationsInput | number
    servingsPerDay?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FoodItemCreateManyCategoryInput = {
    id?: number
    name: string
    quantity: number
    unit: string
    caloriesPerUnit: number
    expiryDate: Date | string
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: number | null
    servingsPerUnit?: number | null
    barcode?: string | null
    notes?: string | null
    locationId?: number | null
  }

  export type SupplyCreateManyCategoryInput = {
    id?: number
    name: string
    quantity: number
    unit?: string | null
    expiryDate?: Date | string | null
    notes?: string | null
    locationId?: number | null
  }

  export type FoodCreateManyCategoryInput = {
    id?: number
    name: string
    brand?: string | null
    upc?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    caloriesPerUnit?: IntFieldUpdateOperationsInput | number
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    servingsPerUnit?: NullableFloatFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    location?: LocationUpdateOneWithoutFoodItemsNestedInput
  }

  export type FoodItemUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    caloriesPerUnit?: IntFieldUpdateOperationsInput | number
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    servingsPerUnit?: NullableFloatFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FoodItemUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    caloriesPerUnit?: IntFieldUpdateOperationsInput | number
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    servingsPerUnit?: NullableFloatFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SupplyUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    location?: LocationUpdateOneWithoutSuppliesNestedInput
  }

  export type SupplyUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SupplyUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FoodUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutrition?: NutritionFactUpdateOneWithoutFoodNestedInput
    stocks?: StockUpdateManyWithoutFoodNestedInput
  }

  export type FoodUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutrition?: NutritionFactUncheckedUpdateOneWithoutFoodNestedInput
    stocks?: StockUncheckedUpdateManyWithoutFoodNestedInput
  }

  export type FoodUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemCreateManyLocationInput = {
    id?: number
    name: string
    quantity: number
    unit: string
    caloriesPerUnit: number
    expiryDate: Date | string
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: number | null
    servingsPerUnit?: number | null
    barcode?: string | null
    notes?: string | null
    categoryId?: number | null
  }

  export type SupplyCreateManyLocationInput = {
    id?: number
    name: string
    quantity: number
    unit?: string | null
    expiryDate?: Date | string | null
    notes?: string | null
    categoryId?: number | null
  }

  export type StockCreateManyLocationInput = {
    id?: number
    foodId: number
    quantity: number
    expiryDate?: Date | string | null
    servingsRemaining?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemUpdateWithoutLocationInput = {
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    caloriesPerUnit?: IntFieldUpdateOperationsInput | number
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    servingsPerUnit?: NullableFloatFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: CategoryUpdateOneWithoutFoodItemsNestedInput
  }

  export type FoodItemUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    caloriesPerUnit?: IntFieldUpdateOperationsInput | number
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    servingsPerUnit?: NullableFloatFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FoodItemUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    caloriesPerUnit?: IntFieldUpdateOperationsInput | number
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    servingsPerUnit?: NullableFloatFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SupplyUpdateWithoutLocationInput = {
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: CategoryUpdateOneWithoutSuppliesNestedInput
  }

  export type SupplyUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SupplyUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StockUpdateWithoutLocationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    servingsRemaining?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    food?: FoodUpdateOneRequiredWithoutStocksNestedInput
    consumptionPlans?: ConsumptionPlanUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    foodId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    servingsRemaining?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumptionPlans?: ConsumptionPlanUncheckedUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    foodId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    servingsRemaining?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockCreateManyFoodInput = {
    id?: number
    quantity: number
    locationId?: number | null
    expiryDate?: Date | string | null
    servingsRemaining?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StockUpdateWithoutFoodInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    servingsRemaining?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneWithoutStocksNestedInput
    consumptionPlans?: ConsumptionPlanUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateWithoutFoodInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    servingsRemaining?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumptionPlans?: ConsumptionPlanUncheckedUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateManyWithoutFoodInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    servingsRemaining?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsumptionPlanCreateManyStockInput = {
    id?: number
    personId: number
    servingsPerDay: number
    startDate?: Date | string
    endDate?: Date | string | null
  }

  export type ConsumptionPlanUpdateWithoutStockInput = {
    servingsPerDay?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    person?: PersonUpdateOneRequiredWithoutConsumptionPlansNestedInput
  }

  export type ConsumptionPlanUncheckedUpdateWithoutStockInput = {
    id?: IntFieldUpdateOperationsInput | number
    personId?: IntFieldUpdateOperationsInput | number
    servingsPerDay?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ConsumptionPlanUncheckedUpdateManyWithoutStockInput = {
    id?: IntFieldUpdateOperationsInput | number
    personId?: IntFieldUpdateOperationsInput | number
    servingsPerDay?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PersonCountOutputTypeDefaultArgs instead
     */
    export type PersonCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PersonCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationCountOutputTypeDefaultArgs instead
     */
    export type LocationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FoodCountOutputTypeDefaultArgs instead
     */
    export type FoodCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FoodCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StockCountOutputTypeDefaultArgs instead
     */
    export type StockCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StockCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PersonDefaultArgs instead
     */
    export type PersonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PersonDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationDefaultArgs instead
     */
    export type LocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FoodItemDefaultArgs instead
     */
    export type FoodItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FoodItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FoodDefaultArgs instead
     */
    export type FoodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FoodDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NutritionFactDefaultArgs instead
     */
    export type NutritionFactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NutritionFactDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StockDefaultArgs instead
     */
    export type StockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StockDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConsumptionPlanDefaultArgs instead
     */
    export type ConsumptionPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConsumptionPlanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SupplyDefaultArgs instead
     */
    export type SupplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SupplyDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}